<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>css笔记</title>
      <link href="/2024/11/19/css%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/11/19/css%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>来源：coderwhy、gpt </p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p><img src="/assets/image-20231118215411435.png" alt="image-20231118215411435"></p><h2 id="css引入"><a href="#css引入" class="headerlink" title="css引入"></a>css引入</h2><p>可以在style元素或者CSS文件中使用@import导入其他的CSS文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(./other.css)</span><br><span class="line">.box&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ul><li><p><strong>text-align: 直接翻译过来设置文本的对齐方式;</strong></p></li><li><p><strong>MDN:</strong> 定义行内内容（例如文字）如何相对它的块父元素对齐</p><ul><li><p><strong>常用的值</strong></p></li><li><p>left：左对齐</p></li><li><p>right：右对齐</p></li><li><p>center：正中间显示</p></li><li><p>justify：两端对齐</p></li></ul></li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h3><ul><li><p><strong>font-size决定文字的大小</strong></p></li><li><p>常用的设置</p><ul><li><p>具体数值+单位</p><ul><li><p>比如100px</p></li><li><p>也可以使用em单位(不推荐)：1em代表100%，2em代表200%，0.5em代表50%</p></li></ul></li><li><p>百分比</p><ul><li>基于父元素的font-size计算，比如50%表示等于父元素font-size的一半</li></ul></li></ul></li></ul><h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><p><strong>font-weight用于设置文字的粗细（重量）</strong></p><ul><li><p><strong>常见的取值:</strong> </p><ul><li><p>100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 ：每一个数字表示一个重量</p></li><li><p>normal：等于400 </p></li><li><p>bold：等于700</p></li><li><p>strong、b、h1~h6等标签的font-weight默认就是bold</p></li></ul></li></ul><h3 id="font"><a href="#font" class="headerlink" title="font"></a>font</h3><ul><li><p><strong>font是一个缩写属性</strong></p><ul><li><p>font 属性可以用来作为 font-style, font-variant, font-weight, font-size, line-height 和 font-family 属性的简写;</p></li><li><p>font-style font-variant font-weight font-size&#x2F;line-height font-family</p></li></ul></li><li><p><strong>规则:</strong></p><ul><li><p>font-style、font-variant、font-weight可以随意调换顺序，也可以省略</p></li><li><p>&#x2F;line-height可以省略，如果不省略，必须跟在font-size后面</p></li><li><p>font-size、font-family不可以调换顺序，不可以省略</p></li></ul></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li><p>属性选择器</p></li><li><p>组合</p></li><li><p>伪类</p></li><li><p>伪元素</p></li></ul><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[title=box]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><ul><li><p><strong>后代选择器一: 所有的后代(直接&#x2F;间接的后代)</strong></p><ul><li><p>选择器之间以空格分割</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>css笔记整理我来<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我又来了整理了什么时候才能整理完呢<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>后代选择器二: 直接子代选择器(必须是直接自带)</strong></p><ul><li><p>选择器之间以 &gt; 分割;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h3><ul><li><p><strong>兄弟选择器一:相邻兄弟选择器</strong></p><ul><li>使用符号 + 连接</li></ul></li><li><p><strong>兄弟选择器二: 普遍兄弟选择器 ~</strong></p><ul><li>使用符号 ~ 连接</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 1变红 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.one</span> + <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 123都变红 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.one</span> ~ <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><h4 id="并集选择器···"><a href="#并集选择器···" class="headerlink" title="并集选择器···"></a>并集选择器···</h4><h4 id="交集选择器-1"><a href="#交集选择器-1" class="headerlink" title="交集选择器"></a>交集选择器</h4><ul><li><p><strong>交集选择器: 需要同时符合两个选择器条件(两个选择器紧密连接)</strong></p></li><li><p>在开发中通常为了精准的选择某一个元素;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>div的one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>p的one<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* div的one变红 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-class">.one</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><ul><li><p><strong>什么是伪类呢?</strong></p><ul><li><p>Pseudo-classes: 翻译过来是伪类;</p></li><li><p>伪类是选择器的一种，它用于选择处于特定状态的元素;</p></li></ul></li><li><p><strong>常见的伪类有</strong></p></li><li><p><strong>1.动态伪类</strong>（dynamic pseudo-classes）</p><ul><li>:link、:visited、:hover、:active、:focus</li></ul></li><li><p><strong>2.目标伪类</strong>（target pseudo-classes）</p><ul><li>:target</li></ul></li><li><p><strong>3.语言伪类</strong>（language pseudo-classes）</p><ul><li>:lang( )</li></ul></li><li><p><strong>4.元素状态伪类</strong>（UI element states pseudo-classes）</p><ul><li>:enabled、:disabled、:checked</li></ul></li><li><p><strong>5.结构伪类</strong>（structural pseudo-classes）</p><ul><li><p>:nth-child( )、:nth-last-child( )、:nth-of-type( )、:nth-lastof-type( )</p></li><li><p>:first-child、:last-child、:first-of-type、:last-of-type</p></li><li><p>:root、:only-child、:only-of-type、:empty</p></li></ul></li><li><p><strong>6.否定伪类</strong>（negation pseudo-classes）</p><ul><li>:not()</li></ul></li><li><p>所有的伪类: <a href="https://developer.mozilla.org/zhCN/docs/Web/CSS/Pseudo-classes">https://developer.mozilla.org/zhCN/docs/Web/CSS/Pseudo-classes</a></p></li></ul><h4 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h4><ul><li><p><strong>使用举例</strong></p><ul><li><p>a:link 未访问的链接</p></li><li><p>a:visited 已访问的链接</p></li><li><p>a:hover 鼠标挪动到链接上(重要)</p></li><li><p>a:active 激活的链接（鼠标在链接上长按住未松开）</p></li></ul></li><li><p><strong>使用注意</strong></p><ul><li><p>:hover必须放在:link和:visited后面才能完全生效</p></li><li><p>:active必须放在:hover后面才能完全生效</p></li><li><p>所以建议的编写顺序是 :link、:visited、:hover、:active</p></li></ul></li><li><p><strong>除了a元素，:hover、:active也能用在其他元素上</strong></p></li></ul><h4 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h4><ul><li><p><strong>:nth-child(1)</strong></p><ul><li>是父元素中的第1个子元素</li></ul></li><li><p><strong>:nth-child(2n)</strong></p><ul><li><p>n代表任意正整数和0</p></li><li><p>是父元素中的第偶数个子元素（第2、4、6、8……个）</p></li><li><p>跟:nth-child(even)同义</p></li></ul></li><li><p><strong>:nth-child(2n + 1)</strong></p><ul><li><p>n代表任意正整数和0</p></li><li><p>是父元素中的第奇数个子元素（第1、3、5、7……个）</p></li><li><p>跟:nth-child(odd)同义</p></li></ul></li><li><p><strong>nth-child(-n + 2)</strong></p><ul><li>代表前2个子元素</li></ul></li><li><p><strong>:nth-last-child()的语法跟:nth-child()类似，不同点是:nth-last-child()从最后一个子元素开始往前计数</strong></p><ul><li><p>:nth-last-child(1)，代表倒数第一个子元素</p></li><li><p>:nth-last-child(-n + 2)，代表最后2个子元素</p></li></ul></li><li><p>:<strong>nth-of-type()用法跟:nth-child()类似</strong></p><ul><li><p>不同点是:nth-of-type()计数时只计算同种类型的元素</p></li><li><p><strong>:nth-last-of-type()用法跟:nth-of-type()类似</strong></p></li><li><p>不同点是:nth-last-of-type()从最后一个这种类型的子元素开始往前计数</p></li></ul></li><li><p><strong>其他常见的伪类(了解):</strong> </p><ul><li><p>:first-child，等同于:nth-child(1)</p></li><li><p>:last-child，等同于:nth-last-child(1)</p></li><li><p>:first-of-type，等同于:nth-of-type(1)</p></li><li><p>:last-of-type，等同于:nth-last-of-type(1)</p></li><li><p>:only-child，是父元素中唯一的子元素</p></li><li><p>:only-of-type，是父元素中唯一的这种类型的子元素</p></li></ul></li><li><p><strong>下面的伪类偶尔会使用:</strong></p><ul><li><p>:root，根元素，就是HTML元素</p></li><li><p>:empty代表里面完全空白的元素</p></li></ul></li></ul><h4 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h4><ul><li><p><strong>:not()的格式是:not(x)</strong></p><ul><li><p>x是一个简单选择器</p></li><li><p>元素选择器、通用选择器、属性选择器、类选择器、id选择器、伪类（除否定伪类）</p></li></ul></li><li><p><strong>:not(x)表示除x以外的元素</strong></p></li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><p>**:nth-child( )**：选择父元素的第N个子元素。应用场景包括给列表的奇数或偶数项设置不同的样式，或者为表格的某些行定制样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even) &#123; <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p>**:nth-last-child( )**：与:nth-child()类似，但计数是从最后一个子元素开始。应用场景可以是突出显示最后几个列表项或表格行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-last-child</span>(<span class="number">2</span>) &#123; <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>:nth-of-type( )</strong> 和 **:nth-last-of-type( )**：分别选择某类型的第N个和倒数第N个子元素。应用场景包括为特定类型的子元素设定样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>n) &#123; <span class="attribute">background-color</span>: <span class="number">#ff0</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>:first-child</strong> 和 <strong>:last-child</strong>：选择所有父元素的第一个和最后一个子元素。应用场景包括为列表的第一项和最后一项设定特殊样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>:first-of-type</strong> 和 <strong>:last-of-type</strong>：选择父元素中第一个和最后一个特定类型的元素。这在某个容器中有多种类型元素时特别有用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-of-type &#123; <span class="attribute">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>:root</strong>：选择文档的根元素，在HTML中通常是元素。应用场景包括设置全局CSS变量或整体样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123; <span class="attr">--main-color</span>: <span class="number">#333</span>; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>:only-child</strong> 和 <strong>:only-of-type</strong>：分别选择没有兄弟元素的元素，以及没有相同类型兄弟元素的元素。这对于只想为这些特定的元素设置样式时很有用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:only-of-type</span> &#123; <span class="attribute">font-style</span>: italic; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>:empty</strong>：选择没有任何子节点(包括文本节点)的元素。这可用于隐藏或为没有内容的元素设置特殊样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:empty</span> &#123; <span class="attribute">display</span>: none; &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="否定伪类（Negation-pseudo-class）"><a href="#否定伪类（Negation-pseudo-class）" class="headerlink" title="否定伪类（Negation pseudo-class）"></a>否定伪类（Negation pseudo-class）</h3><ol><li><p>**:not()**：选择不符合括号内条件的元素。这个伪类在排除某些元素时非常有用，尤其是当你想应用一个通用规则但排除一些元素时。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.special</span>) &#123; <span class="attribute">color</span>: black; &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first</span>-child) &#123; <span class="attribute">margin-top</span>: <span class="number">10px</span>; &#125;</span><br></pre></td></tr></table></figure></li></ol><p>在使用这些伪类时，需要考虑到它们的特定行为和浏览器兼容性。由于CSS选择器具有特定的权重和优先级，所以当多个规则同时应用于同一个元素时，需要理解如何正确地结合使用这些伪类。</p><p>——gpt</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><ul><li><p><strong>常用的伪元素有</strong></p><ul><li><p>:first-line、::first-line</p></li><li><p>:first-letter、::first-letter </p></li><li><p>:before、::before</p></li><li><p>:after、::after</p></li></ul></li><li><p>为了区分伪元素和伪类，建议伪元素使用2个冒号，比如::first-line</p></li><li><p>::first-line可以针对首行文本设置属性</p></li><li><p>::first-letter可以针对首字母设置属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;321&quot;</span>;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>::before和::after</strong>用来在一个元素的内容之前或之后插入其他内容（可以是文字、图片)</p></li><li><p>常通过 content 属性来为一个元素添加修饰性的内容。</p></li></ul>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪类用于选择元素的状态或位置，而伪元素用于选择元素的虚拟部分或生成的内容。</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>标准流</p><ul><li><p>默认情况下，元素都是按照<strong>normal flow</strong>（标准流、常规流、正常流、文档流【document flow】）进行排布</p><ul><li><p>从左到右、从上到下按顺序摆放好</p></li><li><p>默认情况下，互相之间不存在层叠现象</p></li></ul></li></ul><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>默认值，静态定位</p><h3 id="relative相对定位"><a href="#relative相对定位" class="headerlink" title="relative相对定位"></a>relative相对定位</h3><ul><li><p>定位规则</p><ul><li><p>元素按照标准流布局</p></li><li><p>可以通过left、right、top、bottom进行定位</p></li><li><p>定位参照对象是元素自己原来的位置</p></li><li><p><strong>left、right、top、bottom用来设置元素的具体位置，对元素的作用如下图所示</strong></p><p><img src="/assets/image-20231112213736729.png" alt="image-20231112213736729"></p></li></ul></li><li><p><strong>相对定位的应用场景</strong></p><ul><li>在不影响其他元素位置的前提下，对当前元素位置进行微调</li></ul></li></ul><h3 id="fixed固定定位"><a href="#fixed固定定位" class="headerlink" title="fixed固定定位"></a>fixed固定定位</h3><ul><li><p>元素脱标</p></li><li><p>可以通过left、right、top、bottom进行定位</p></li><li><p>定位参照对象是视口</p></li><li><p><strong>当画布滚动时，固定不动</strong></p></li></ul><h3 id="画布和视口"><a href="#画布和视口" class="headerlink" title="画布和视口"></a>画布和视口</h3><p><img src="/assets/image-20231112214411412.png" alt="image-20231112214411412"></p><ul><li><p><strong>视口（Viewport）</strong>(红框)</p><ul><li>文档的可视区域</li></ul></li><li><p><strong>画布（Canvas）</strong>(黑框)</p><ul><li><p>用于渲染文档的区域</p></li><li><p>文档内容超出视口范围，可以通过滚动查看</p></li></ul></li><li><p><strong>宽高对比</strong></p><ul><li>画布 &gt;&#x3D; 视口</li></ul></li></ul><h3 id="absolute绝对定位"><a href="#absolute绝对定位" class="headerlink" title="absolute绝对定位"></a>absolute绝对定位</h3><ul><li><p><strong>元素脱标</strong></p></li><li><p><strong>可以通过left、right、top、bottom进行定位</strong></p></li><li><p>定位参照对象是最邻近的&#x3D;&#x3D;定位&#x3D;&#x3D;祖先元素，如果找不到这样的祖先元素，参照对象是视口</p></li></ul><h3 id="absolute-fixed-绝对定位元素-的特点"><a href="#absolute-fixed-绝对定位元素-的特点" class="headerlink" title="absolute&#x2F;fixed(绝对定位元素)的特点"></a>absolute&#x2F;fixed(绝对定位元素)的特点</h3><ul><li><p><strong>可以随意设置宽高</strong></p></li><li><p><strong>没有宽高默认由内容决定</strong></p></li><li><p><strong>不再受标准流的约束</strong></p></li><li><p><strong>不再给父元素汇报宽高数据</strong>(即使你是我爹，我脱标了你也包不住我)</p></li><li><p>脱标元素<strong>内部</strong>默认还是按照标准流布局</p></li></ul><h3 id="常用的对绝对定位元素的操作"><a href="#常用的对绝对定位元素的操作" class="headerlink" title="常用的对绝对定位元素的操作"></a>常用的对绝对定位元素的操作</h3><ul><li><p><strong>对于绝对定位元素来说</strong></p><ul><li><p>定位参照对象的宽度 &#x3D; left + right + margin-left + margin-right + 绝对定位元素的实际占用宽度</p></li><li><p>定位参照对象的高度 &#x3D; top + bottom + margin-top + margin-bottom + 绝对定位元素的实际占用高度</p></li></ul></li><li><p><strong>如果希望绝对定位元素的宽高和定位参照对象一样，可以给绝对定位元素设置以下属性</strong></p><ul><li>left: 0、right: 0、top: 0、bottom: 0、margin:0</li></ul></li><li><p><strong>如果希望绝对定位元素在定位参照对象中居中显示，可以给绝对定位元素设置以下属性</strong></p><ul><li><p>left: 0、right: 0、top: 0、bottom: 0、margin: auto</p></li><li><p>另外，还得设置具体的宽高值（宽高小于定位参照对象的宽高）</p></li></ul></li></ul><h3 id="sticky粘性定位"><a href="#sticky粘性定位" class="headerlink" title="sticky粘性定位"></a>sticky粘性定位</h3><ul><li><p>可以看做是相对定位和固定定位的结合体;</p></li><li><p>它允许被定位的元素表现得像相对定位一样，直到它滚动到某个阈值点;</p></li><li><p>当达到这个阈值点时, 就会变成固定(绝对)定位;</p></li><li><p>sticky是相对于最近的&#x3D;&#x3D;滚动祖先&#x3D;&#x3D;包含滚动视口的</p></li></ul><p><img src="/assets/image-20231112222104776.png" alt="image-20231112222104776"></p><h3 id="z-index属性"><a href="#z-index属性" class="headerlink" title="z-index属性"></a>z-index属性</h3><ul><li><p>作用</p><ul><li><p>z-index属性用来设置定位元素的层叠顺序（仅对定位元素有效）</p></li><li><p>取值可以是正整数、负整数、0</p></li></ul></li><li><p><strong>比较原则</strong></p><ul><li><p>如果是兄弟关系，z-index越大，层叠在越上面</p><ul><li>z-index相等，写在后面的那个元素层叠在上面</li></ul></li><li><p>如果不是兄弟关系</p><ul><li><p>各自从元素自己以及祖先元素中，找出最邻近的2个定位元素进行比较</p></li><li><p>而且这2个定位元素必须有设置z-index的具体数值</p></li></ul></li></ul></li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ul><li><p><strong>可以通过float属性让元素产生浮动效果，float的常用取值</strong></p><ul><li><p>none：不浮动，默认值</p></li><li><p>left：向左浮动</p></li><li><p>right：向右浮动</p></li></ul></li><li><p><strong>元素一旦浮动后, 脱离标准流</strong></p><ul><li>朝着向左或向右方向移动，直到自己的边界紧贴着包含块（一般是父元素）或者其他浮动元素的边界为止，如果水平方向剩余的空间不够显示浮动元素，浮动元素将向下移动，直到有充足的空间为止</li></ul></li><li><p>float 属性最初只用于在一段文本内浮动图像, 实现文字环绕的效果。float属性可以指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。行内级内容将会被浮动元素推出。</p></li></ul><p><img src="/assets/image-20231112223353343.png" alt="image-20231112223353343"></p><ul><li><p>定位元素会层叠在浮动元素上面</p></li><li><p>行内级元素、inline-block元素浮动后，其顶部将与所在行的顶部对齐**</p></li></ul><p><img src="/assets/image-20231112223302708.png" alt="image-20231112223302708"></p><h3 id="浮动塌陷"><a href="#浮动塌陷" class="headerlink" title="浮动塌陷"></a>浮动塌陷</h3><ul><li><p>由于浮动元素脱离了标准流，变成了脱标元素，所以不再向父元素汇报高度</p></li><li><p>父元素计算总高度时，就不会计算浮动子元素的高度，导致了高度坍塌的问题</p></li><li><p>解决父元素高度坍塌问题的过程，一般叫做清浮动（清理浮动、清除浮动）</p></li><li><p><strong>清浮动的目的是</strong></p><ul><li><p>让父元素计算总高度的时候，把浮动子元素的高度算进去</p></li><li><p><strong>如何清除浮动呢? 使用clear属性</strong></p></li></ul></li><li><p><strong>clear属性是做什么的呢?</strong></p></li><li><p>clear 属性可以指定一个元素是否必须移动(清除浮动后)到在它之前的浮动元素下面;</p></li><li><p><strong>clear的常用取值</strong></p><ul><li><p>left：要求元素的顶部低于之前生成的所有左浮动元素的底部</p></li><li><p>right：要求元素的顶部低于之前生成的所有右浮动元素的底部</p></li><li><p>both：要求元素的顶部低于之前生成的所有浮动元素的底部</p></li><li><p>none：默认值，无特殊要求</p></li></ul></li><li><p><strong>那么我们可以利用这个特性来清除浮动.</strong></p></li></ul><h3 id="解决浮动的方法"><a href="#解决浮动的方法" class="headerlink" title="解决浮动的方法"></a>解决浮动的方法</h3><ul><li><p><strong>事实上我们有很多方法可以清除浮动</strong></p></li><li><p><strong>方法一: 给父元素设置固定高度</strong></p><ul><li>扩展性不好（不推荐）</li></ul></li><li><p><strong>方法二: 在父元素最后增加一个空的块级子元素，并且让它设置clear: both</strong></p><ul><li><p>会增加很多无意义的空标签，维护麻烦</p></li><li><p>违反了结构与样式分离的原则（不推荐）</p></li></ul></li><li><p><strong>方法三: 给父元素添加一个伪元素</strong></p><ul><li><p>推荐;</p></li><li><p>编写好后可以轻松实现清除浮动;</p></li><li><p>纯css样式解决，结构与样式分离</p></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear-fix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">visibility</span>: hidden;<span class="comment">/*浏览器兼容性*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;<span class="comment">/*浏览器兼容性*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20231112224058560.png" alt="image-20231112224058560"></p><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><ul><li><p><strong>两个重要的概念：</strong></p><ul><li><p>开启了 flex 布局的元素叫 flex container</p></li><li><p>flex container 里面的直接子元素叫做 flex item</p></li></ul></li></ul><p><img src="/assets/image-20231115192618561.png" alt="image-20231115192618561"></p><ul><li><p><strong>当flex container中的子元素变成了flex item时, 具备一下特点:</strong></p><ul><li><p>flex item的布局将受flex container属性的设置来进行控制和布局;</p></li><li><p>flex item不再严格区分块级元素和行内级元素;</p></li><li><p>flex item默认情况下是包裹内容的, 但是可以设置宽度和高度;</p></li></ul></li><li><p><strong>设置 display 属性为 flex 或者 inline-flex 可以成为 flex container</strong></p><ul><li><p>flex： flex container 以 block-level 形式存在</p></li><li><p>(不常用)inline-flex： flex container 以 inline-level 形式存在</p></li></ul></li></ul><h3 id="flex布局的模型"><a href="#flex布局的模型" class="headerlink" title="flex布局的模型"></a>flex布局的模型</h3><p><img src="/assets/image-20231115192917574.png" alt="image-20231115192917574"></p><h3 id="flex-container的属性"><a href="#flex-container的属性" class="headerlink" title="flex container的属性"></a>flex container的属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><ul><li><p><strong>flex items 默认都是沿着 main axis（主轴）从 main start 开始往 main end 方向排布</strong></p></li><li><p>flex-direction 决定了 main axis 的方向，有 4 个取值</p></li><li><p>row（默认值）、row-reverse、column、column-reverse</p><p><img src="/assets/image-20231115193142398.png" alt="image-20231115193142398"></p></li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><ul><li><p><strong>flex-wrap 决定了 flex container 是单行还是多行</strong></p></li><li><p>nowrap（默认）：单行</p></li><li><p>wrap：多行</p></li><li><p>wrap-reverse：多行（对比 wrap，cross start 与 cross end 相反）</p></li></ul><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><ul><li><strong>flex-flow 属性是 flex-direction 和 flex-wrap 的简写。</strong></li><li>顺序任何, 并且都可以省略</li><li><flex-direction> | | <flex-wrap></li></ul><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><ul><li><p><strong>justify-content 决定了 flex items 在 main axis 上的对齐方式</strong></p></li><li><p>flex-start（默认值）：与 main start 对齐</p><p><img src="/assets/image-20231115193927676.png" alt="image-20231115193927676"></p></li><li><p>flex-end：与 main end 对齐</p><p><img src="/assets/image-20231115193940416.png" alt="image-20231115193940416"></p></li><li><p>center：居中对齐</p><p><img src="/assets/image-20231115193958907.png" alt="image-20231115193958907"></p></li><li><p>space-between：</p><ul><li><p>flex items 之间的距离相等</p></li><li><p>与 main start、main end两端对齐</p><p><img src="/assets/image-20231115194018498.png" alt="image-20231115194018498"></p></li></ul></li><li><p>space-around：</p><ul><li><p>flex items 之间的距离相等</p></li><li><p>flex items 与 main start、main end 之间的距离是 flex items 之间距离的一半</p><p><img src="/assets/image-20231115194032593.png" alt="image-20231115194032593/"></p></li></ul></li><li><p>space-evenly：</p><ul><li><p>flex items 之间的距离相等</p></li><li><p>flex items 与 main start、main end 之间的距离 等于 flex items 之间的距离</p><p><img src="/assets/image-20231115194056806.png" alt="image-20231115194056806"></p></li></ul></li></ul><h4 id="align-item"><a href="#align-item" class="headerlink" title="align-item"></a>align-item</h4><ul><li><p><strong>align-items 决定了 flex items 在 cross axis 上的对齐方式</strong></p></li><li><p>normal：在弹性布局中，效果和stretch一样</p></li><li><p>stretch：当 flex items 在 cross axis 方向的 size 为 auto 、或者不设置时，会自动拉伸至填充 flex container</p><p><img src="/assets/image-20231115194340295.png" alt="image-20231115194340295"></p></li><li><p>flex-start：与 cross start 对齐</p><p><img src="/assets/image-20231115194318803.png" alt="image-20231115194318803"></p></li><li><p>flex-end：与 cross end 对齐</p><p><img src="/assets/image-20231115194307022.png" alt="image-20231115194307022"></p></li><li><p>center：居中对齐</p><p><img src="/assets/image-20231115194253434.png" alt="image-20231115194253434"></p></li><li><p>baseline：与基准线对齐</p><p><img src="/assets/image-20231115194238020.png" alt="image-20231115194238020"></p></li></ul><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p><strong>align-content 决定了多行 flex items 在 cross axis 上的对齐方式，用法与 justify-content 类似</strong></p><ul><li><p>stretch（默认值）：与 align-items 的 stretch 类似</p><p><img src="/assets/image-20231115194625373.png" alt="image-20231115194625373"></p></li><li><p>flex-start：与 cross start 对齐</p><p><img src="/assets/image-20231115194640269.png" alt="image-20231115194640269"></p></li><li><p>flex-end：与 cross end 对齐</p><p><img src="/assets/image-20231115194654514.png" alt="image-20231115194654514"></p></li><li><p>center：居中对齐</p><p><img src="/assets/image-20231115194713078.png" alt="image-20231115194713078"></p></li><li><p>space-between：</p><ul><li>flex items 之间的距离相等</li><li>与 cross start、cross end两端对齐</li></ul><p><img src="/assets/image-20231115194734130.png" alt="image-20231115194734130"></p></li><li><p>space-around：</p><ul><li><p>flex items 之间的距离相等</p></li><li><p>flex items 与 cross start、cross end 之间的距离是 flex items 之间距离的一半</p><p><img src="/assets/image-20231115194933205.png" alt="image-20231115194933205"></p></li></ul></li><li><p>space-evenly：</p><ul><li><p>flex items 之间的距离相等</p></li><li><p>flex items 与 cross start、cross end 之间的距离 等于 flex items 之间的距离</p></li></ul></li></ul><h3 id="flex-items的属性"><a href="#flex-items的属性" class="headerlink" title="flex items的属性"></a>flex items的属性</h3><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><ul><li><p>可以设置任意整数（正整数、负整数、0），值越小就越排在前面</p></li><li><p>默认值是 0</p></li></ul><h4 id="flex-items"><a href="#flex-items" class="headerlink" title="flex items"></a>flex items</h4><ul><li><p><strong>flex items 可以通过 align-self 覆盖 flex container 设置的 align-items</strong></p><ul><li><p>auto（默认值）：遵从 flex container 的 align-items 设置</p></li><li><p>stretch、flex-start、flex-end、center、baseline，效果跟 align-items 一致</p><p><img src="/assets/image-20231115201846870.png" alt="image-20231115201846870"></p></li></ul></li></ul><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><ul><li><p><strong>flex-grow 决定了 flex items 如何扩展(拉伸&#x2F;成长)</strong></p><ul><li><p>可以设置任意非负数字（正小数、正整数、0），默认值是 0</p></li><li><p>当 flex container 在 main axis 方向上有剩余 size 时，flex-grow 属性才会有效</p></li></ul></li><li><p>如果所有 flex items 的 flex-grow 总和 sum 超过 1，每个 flex item 扩展的 size 为</p><ul><li>flex container 的剩余 size * flex-grow &#x2F; sum</li></ul></li><li><p><strong>flex items 扩展后的最终 size 不能超过 max-width\max-height</strong></p></li></ul><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><ul><li><p><strong>flex-shrink 决定了 flex items 如何收缩(缩小)</strong></p><ul><li><p>可以设置任意非负数字（正小数、正整数、0），默认值是 1</p></li><li><p>当 flex items 在 main axis 方向上超过了 flex container 的 size，flex-shrink 属性才会有效</p></li></ul></li><li><p><strong>如果所有 flex items 的 flex-shrink 总和超过 1，每个 flex item 收缩的 size为</strong></p><ul><li>flex items 超出 flex container 的 size * 收缩比例 &#x2F; 所有 flex items 的收缩比例之和</li></ul></li><li><p><strong>flex items 收缩后的最终 size 不能小于 min-width\min-height</strong></p></li></ul><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><ul><li><p><strong>flex-basis 用来设置 flex items 在 main axis 方向上的 base size</strong></p><ul><li>auto（默认值）、具体的宽度数值（100px）</li></ul></li><li><p><strong>决定 flex items 最终 base size 的因素，从优先级高到低</strong></p><ul><li><p>max-width\max-height\min-width\min-height</p></li><li><p>flex-basis</p></li><li><p>width\height</p></li><li><p>内容本身的 size</p></li></ul></li></ul><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><ul><li><p><strong>flex 是 flex-grow || flex-shrink || flex-basis 的简写,flex 属性可以指定1个，2个或3个值。</strong></p><p>none | <flex-grow><flex-shrink> | | <flex-basis></p></li><li><p><strong>单值语法: 值必须为以下其中之一:</strong></p><ul><li><p>一个无单位数(<number>): 它会被当作<flex-grow>的值。</p></li><li><p>一个有效的宽度(width)值: 它会被当作 <flex-basis>的值。</p></li><li><p>关键字none，auto或initial.</p></li></ul></li><li><p><strong>双值语法: 第一个值必须为一个无单位数，并且它会被当作 <flex-grow> 的值。</strong></p><ul><li><p>第二个值必须为以下之一：</p><ul><li><p>一个无单位数：它会被当作 <flex-shrink> 的值。</p></li><li><p>一个有效的宽度值: 它会被当作 <flex-basis> 的值。</p></li></ul></li></ul></li><li><p><strong>三值语法:</strong></p><ul><li><p>第一个值必须为一个无单位数，并且它会被当作 <flex-grow> 的值。</p></li><li><p>第二个值必须为一个无单位数，并且它会被当作 <flex-shrink> 的值。</p></li><li><p>第三个值必须为一个有效的宽度值， 并且它会被当作 <flex-basis> 的值。</p></li></ul></li></ul><h2 id="居中方案总结"><a href="#居中方案总结" class="headerlink" title="居中方案总结"></a>居中方案总结</h2><ul><li><p>水平居中</p><ul><li>行内级元素：设置父元素的text-align:center</li><li>块级元素：设置当前块元素宽度 margin:0 auto;</li><li>绝对定位：元素有宽度情况下，left0&#x2F;right0&#x2F;margin:0 auto</li><li>flex:justify-content:center</li></ul></li><li><p>垂直居中：</p><ul><li><p>绝对定位：元素有高度，top0&#x2F;bottom0&#x2F;margin:auto 0【弊端：元素必须有高度，必须设置定位，需要脱标】</p></li><li><p>flex布局：父元素设置flex布局，align-items:center【弊端：子元素都会被垂直居中】</p></li><li><p>垂直位移父元素高度一半，再向上位移自己的一半</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//margin-top:50% 错误：margin-top的百分比是相对于父元素宽度的</span></span><br><span class="line"><span class="attr">position</span>: relative;</span><br><span class="line"><span class="attr">top</span>:<span class="number">50</span>%</span><br><span class="line"><span class="attr">transform</span>:<span class="title function_">translate</span>(<span class="number">0</span>,-<span class="number">50</span>%)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><ul><li><p>CSS transform属性允许你旋转，缩放，倾斜或平移给定元素。</p></li><li><p><strong>Transform是形变的意思，transformer就是变形金刚</strong></p></li></ul><h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><ul><li><p><strong>平移：translate(x, y)</strong></p></li><li><p><strong>值个数</strong></p><ul><li><p>一个值时，设置x轴上的位移</p></li><li><p>二个值时，设置x轴和y轴上的位移</p></li></ul></li><li><p><strong>值类型：</strong></p><ul><li><p>数字：100px</p></li><li><p>百分比：参照元素本身（ refer to the size of bounding box ）</p></li></ul></li></ul><h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h3><ul><li><p><strong>缩放：scale(x, y)</strong></p></li><li><p><strong>值个数</strong></p><ul><li><p>一个值时，设置x轴上的缩放</p></li><li><p>二个值时，设置x轴和y轴上的缩放</p></li></ul></li><li><p><strong>值类型：</strong></p><ul><li><p>数字&#x2F;百分比：</p></li><li><p>1：保持不变</p></li><li><p>2：放大一倍</p></li><li><p>0.5：缩小一半</p></li></ul></li></ul><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><ul><li><p><strong>旋转：rotate(deg)</strong></p></li><li><p><strong>值个数</strong></p><ul><li>一个值时，表示旋转的角度</li></ul></li><li><p><strong>值类型：</strong></p><ul><li>deg：旋转的角度</li><li>正数为顺时针</li><li>负数为逆时针</li></ul></li><li><p><strong>注意：旋转的原点受transform-origin的影响</strong></p></li></ul><h3 id="属性-transform-origin"><a href="#属性-transform-origin" class="headerlink" title="属性 transform-origin"></a>属性 transform-origin</h3><ul><li><p>默认值：<code>transform-origin:center center</code></p></li><li><p><strong>一个值：</strong></p><ul><li>设置x轴的原点</li></ul></li><li><p><strong>两个值：</strong></p><ul><li>设置x轴和y轴的原点</li></ul></li><li><p><strong>必须是<length>，<percentage>，或 left, center, right, top, bottom关键字中的一个</strong></p><ul><li><p>left, center, right, top, bottom关键字</p></li><li><p>length：从左上角开始计算</p></li><li><p>百分比：参考元素本身大小</p></li></ul></li></ul><h3 id="skew-x-y"><a href="#skew-x-y" class="headerlink" title="skew(x, y)"></a>skew(x, y)</h3><ul><li><p><strong>值个数</strong></p><ul><li>一个值时，表示x轴上的倾斜</li><li>二个值时，表示x轴和y轴上的倾斜</li></ul></li><li><p>值类型：</p><ul><li><p>deg：旋转的角度</p></li><li><p>正数为顺时针</p></li><li><p>负数为逆时针</p></li></ul></li><li><p><strong>注意：旋转的原点受transform-origin的影响</strong></p></li></ul><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><ul><li><p>transition CSS 属性是 transition-property，transition-duration，transition-timing-function 和 transition-delay 的*一个简写属性。</p><ul><li><p>transition-property：指定应用过渡属性的名称</p></li><li><p>可以写all表示所有可动画的属性</p></li><li><p>属性是否支持动画查看文档</p></li></ul></li><li><p>transition-duration：指定过渡动画所需的时间</p><ul><li>单位可以是秒（s）或毫秒（ms）</li></ul></li><li><p>transition-timing-function：指定动画的变化曲线</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-timing-function">https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-timing-function</a></li></ul></li><li><p>transition-delay：指定过渡动画执行之前的等待时间</p></li></ul><h2 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h2><ul><li><p><strong>cursor可以设置鼠标指针（光标）在元素上面时的显示样式</strong></p></li><li><p><strong>cursor常见的设值有</strong></p><ul><li><p>auto：浏览器根据上下文决定指针的显示样式，比如根据文本和非文本切换指针样式</p></li><li><p>default：由操作系统决定，一般就是一个小箭头</p></li><li><p>pointer：一只小手，鼠标指针挪动到链接上面默认就是这个样式</p></li><li><p>text：一条竖线，鼠标指针挪动到文本输入框上面默认就是这个样式</p></li><li><p>none：没有任何指针显示在元素上面</p></li></ul></li></ul><h2 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h2><ul><li><p><strong>什么是CSS Sprite</strong></p><ul><li>是一种CSS图像合成技术，将各种小图片合并到一张图片上，然后利用CSS的背景定位来显示对应的图片部分</li><li>有人翻译为：CSS雪碧、CSS精灵</li></ul></li><li><p><strong>使用CSS Sprite的好处</strong></p><ul><li><p>减少网页的http请求数量，加快网页响应速度，减轻服务器压力</p></li><li><p>减小图片总大小</p></li><li><p>解决了图片命名的困扰，只需要针对一张集合的图片命名</p></li></ul></li><li><p><strong>Sprite图片制作（雪碧图、精灵图）</strong></p><ul><li><p>方法1：Photoshop, 设计人员提供</p></li><li><p>方法2：<a href="https://www.toptal.com/developers/css/sprite-generator">https://www.toptal.com/developers/css/sprite-generator</a></p></li></ul></li><li><p><strong>精灵图如何使用呢?</strong></p><ul><li>精灵图的原理是通过只显示图片的很小一部分来展示的;</li></ul></li><li><p><strong>通常使用背景:</strong></p><ul><li>1.设置对应元素的宽度和高度</li><li>2.设置精灵图作为背景图片</li><li>3.调整背景图片的位置来展示</li></ul></li><li><p><strong>如何获取精灵图的位置</strong></p><ul><li><a href="http://www.spritecow.com/">http://www.spritecow.com/</a></li></ul></li></ul><p><img src="/assets/image-20231229102549177.png" alt="image-20231229102549177"></p><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><ul><li><p><strong>字体图标的好处：</strong></p><ul><li><p>放大不会失真</p></li><li><p>可以任意切换颜色</p></li><li><p>用到很多个图标时，文件相对图片较小</p></li></ul></li><li><p><strong>字体图标的使用：</strong></p><ul><li><p>登录阿里icons（<a href="https://www.iconfont.cn/%EF%BC%89">https://www.iconfont.cn/）</a></p></li><li><p>下载代码，并且拷贝到项目中</p></li><li><p><strong>将字体文件和默认的css文件导入到项目中</strong></p></li></ul></li><li><p>字体图标的使用步骤:</p><ul><li><p>第一步: 通过link引入iconfont.css文件</p></li><li><p>第二步: 使用字体图标</p></li></ul></li><li><p><strong>使用字体图标常见的有两种方式:</strong></p><ul><li><p>方式一: 通过对应字体图标的Unicode来显示代码;</p></li><li><p>方式二: 利用已经编写好的class, 直接使用即可;</p></li></ul></li></ul><p><img src="/assets/image-20231229103431373.png" alt="image-20231229103431373"></p><h2 id="webfonts"><a href="#webfonts" class="headerlink" title="webfonts"></a>webfonts</h2><ul><li><p>webfonts的显示原理</p><ul><li><p>浏览器一个网页时, 因为代码中有引入字体文件, 字体文件会被一起下载下来;</p></li><li><p>浏览器会根据使用的字体在下载的字体文件中查找、解析、使用对应的字体；</p></li><li><p>在浏览器中使用对应的字体显示内容；</p></li></ul></li><li><p>webfonts兼容性</p></li><li><ul><li><p><strong>我们刚才使用的字体文件是 .ttf, 它是****TrueType字体.</strong></p></li><li><p>在开发中某些浏览器可能不支持该字体, 所以为了浏览器的兼容性问题, 我们需要有对应其他格式的字体;</p></li><li><p><strong>TrueType字体：拓展名是 .ttf</strong></p></li><li><p>OpenType&#x2F;TrueType字体：拓展名是 .ttf、.otf，</p></li></ul><p>建立在TrueType字体之上</p><ul><li><p>Embedded OpenType字体：拓展名是 .eot，OpenType字体的压缩版</p></li><li><p>SVG字体：拓展名是 .svg、 .svgz</p></li><li><p>WOFF表示Web Open Font Format web开放字体：</p></li></ul><p>拓展名是 .woff，建立在TrueType字体之上</p><ul><li><p><strong>这里我们提供一个网站来生产对应的字体文件:</strong></p></li><li><p><a href="https://font.qqe2.com/#">https://font.qqe2.com/#</a> 暂时可用</p></li></ul></li></ul><p>实操：</p><p> 字体天下网：<a href="https://www.fonts.net.cn/fonts-zh-1.html">https://www.fonts.net.cn/fonts-zh-1.html</a></p><p>1.下载</p><p><img src="/assets/image-20231229104344307.png" alt="image-20231229104344307"></p><p>2.导入</p><p><img src="/assets/image-20231229104355700.png" alt="image-20231229104355700"></p><p>3.引入</p><p><img src="/assets/image-20231229104324407.png" alt="image-20231229104324407"></p><p>4.成果</p><p><img src="/assets/image-20231229104223778.png" alt="image-20231229104223778"></p><ul><li><p>我们刚才使用的字体文件是 .ttf, 它是TrueType字体.</p></li><li><p>在开发中某些浏览器可能不支持该字体, 所以为了浏览器的兼容性问题, 我们需要有对应其他格式的字体;</p><ul><li><p><strong>TrueType字体：拓展名是 .ttf</strong></p></li><li><p>OpenType&#x2F;TrueType字体：拓展名是 .ttf、.otf，建立在TrueType字体之上</p></li><li><p>Embedded OpenType字体：拓展名是 .eot，OpenType字体的压缩版</p></li><li><p>SVG字体：拓展名是 .svg、 .svgz</p></li><li><p>WOFF表示Web Open Font Format web开放字体：拓展名是 .woff，建立在TrueType字体之上</p></li></ul></li><li><p>**这里我们提供一个网站来生产对应的字体文件:**<a href="https://font.qqe2.com/#">https://font.qqe2.com/#</a> 暂时可用</p></li></ul><h2 id="css画图形"><a href="#css画图形" class="headerlink" title="css画图形"></a>css画图形</h2><p><a href="https://css-tricks.com/the-shapes-of-css/#top-of-site">https://css-tricks.com/the-shapes-of-css/#top-of-site</a></p><p>常用：circle:<code>border-radius: 50%</code></p><h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h2><p><strong>vertical-align会影响</strong> <strong>行内块级元素</strong> <strong>在一个</strong> <strong>行盒</strong> <strong>中垂直方向的位置</strong></p><ul><li><p>vertical-align的属性值</p><ul><li><p>baseline(默认值)：基线对齐（你得先明白什么是基线）</p></li><li><p>top：把行内级盒子的顶部跟line boxes顶部对齐</p></li><li><p>middle：行内级盒子的中心点与父盒基线加上x-height一半的线对齐</p></li><li><p>bottom：把行内级盒子的底部跟line box底部对齐</p></li><li><p><percentage>：把行内级盒子提升或者下降一段距离（距离相对于line-height计算\元素高度）， 0%意味着同baseline一样</p></li><li><p><length>：把行内级盒子提升或者下降一段距离，0cm意味着同baseline一样</p></li></ul></li><li><p><strong>解决图片下边缘的间隙方法:</strong></p><ul><li><p>方法一: 设置成top&#x2F;middle&#x2F;bottom</p></li><li><p>方法二: 将图片设置为block元素</p></li></ul></li><li><p><strong>baseline是谁</strong></p><ul><li>文本的baseline是字母x的下方</li><li>Inline-block默认的baseline是margin-bottom的底部（没有，就是盒子的底部）</li><li>Inline-block有文本时，baseline是最后一行文本的x的下方</li><li><strong>有图片，有文字时，line-boxes</strong><ul><li><img src="/assets/image-20231229121800429.png"></li></ul></li><li><strong>有图片，有文字，有line-boxes</strong><ul><li><img src="/assets/image-20231229121811175.png" alt="image-20231229121811175"></li></ul></li><li><strong>有图片，有文字，有inline-block（比图片要大）而且设置了margin-bottom，</strong><ul><li><img src="/assets/image-20231229121827824.png" alt="image-20231229121827824"></li></ul></li><li><strong>有图片、文字、inline-block（比图片要大）而且设置了margin-bottom并且有文字</strong><ul><li><img src="/assets/image-20231229121844575.png" alt="image-20231229121844575"></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验5.1&amp;5.2</title>
      <link href="/2024/10/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C5.1-5.2/"/>
      <url>/2024/10/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C5.1-5.2/</url>
      
        <content type="html"><![CDATA[<h2 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h2><p><code>gedit test5.c</code></p><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 640</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> address, size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">RECT</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----函数定义-------*/</span></span><br><span class="line">RECT *<span class="title function_">assignment</span><span class="params">(RECT *head, <span class="type">int</span> application, <span class="type">char</span> way)</span>; <span class="comment">// 分配分区</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">firstfit</span><span class="params">(RECT *head, RECT *heada, RECT *back1)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bestfit</span><span class="params">(RECT *head, RECT *heada, RECT *back1)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">worstfit</span><span class="params">(RECT *head, RECT *heada, RECT *back1)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">backcheck</span><span class="params">(RECT *head, RECT *back1)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(RECT *output)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----变量定义-------*/</span></span><br><span class="line">RECT *head, *heada, *back, *assignl, *p;</span><br><span class="line"><span class="type">int</span> application1, maxblocknum;</span><br><span class="line"><span class="type">char</span> way; <span class="comment">// 用于定义分配方式：首次适应、最佳适应、最坏适应</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> choose;</span><br><span class="line">    <span class="type">int</span> check;</span><br><span class="line">    RECT *allocated;</span><br><span class="line"></span><br><span class="line">    head = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RECT));</span><br><span class="line">    p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RECT));</span><br><span class="line">    head-&gt;size = MAX;</span><br><span class="line">    head-&gt;address = <span class="number">0</span>;</span><br><span class="line">    head-&gt;next = p;</span><br><span class="line">    maxblocknum = <span class="number">1</span>;</span><br><span class="line">    p-&gt;size = MAX;</span><br><span class="line">    p-&gt;address = <span class="number">0</span>;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    print(head);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出空闲分区表的初始状态</span></span><br><span class="line">    heada = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RECT));</span><br><span class="line">    heada-&gt;size = <span class="number">0</span>;</span><br><span class="line">    heada-&gt;address = <span class="number">0</span>;</span><br><span class="line">    heada-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter the allocation way (first, best, worst (f/b/w)):\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;way);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Enter the allocate or reclaim (a/r), or press other key to exit.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;choose);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">tolower</span>(choose) == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Input application:\n&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;application1);</span><br><span class="line">            assignl = assignment(head, application1, <span class="built_in">tolower</span>(way));</span><br><span class="line">            <span class="keyword">if</span> (assignl-&gt;address == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Too large application! Allocation fails!\n\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Allocation Success! ADDRESS=%5d\n&quot;</span>, assignl-&gt;address);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n*********Unallocated Table*************\n&quot;</span>);</span><br><span class="line">            print(head);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n*********Allocated Table********\n&quot;</span>);</span><br><span class="line">            print(heada);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">tolower</span>(choose) == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">            back = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RECT));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Input address and Size:\n&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;back-&gt;address, &amp;back-&gt;size);</span><br><span class="line">            check = backcheck(head, back);</span><br><span class="line">            <span class="keyword">if</span> (check == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">tolower</span>(way) == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                    firstfit(head, heada, back);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">tolower</span>(way) == <span class="string">&#x27;b&#x27;</span>) &#123;</span><br><span class="line">                    bestfit(head, heada, back);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">tolower</span>(way) == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">                    worstfit(head, heada, back);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n*********Unallocated Table*************\n&quot;</span>);</span><br><span class="line">                print(head);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n*********Allocated Table********\n&quot;</span>);</span><br><span class="line">                print(heada);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">tolower</span>(choose) == <span class="string">&#x27;a&#x27;</span> || <span class="built_in">tolower</span>(choose) == <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------内存分配函数-------*/</span></span><br><span class="line">RECT *<span class="title function_">assignment</span><span class="params">(RECT *head, <span class="type">int</span> application, <span class="type">char</span> way)</span> &#123;</span><br><span class="line">    RECT *after, *before, *assign;</span><br><span class="line">    assign = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RECT));</span><br><span class="line">    assign-&gt;size = application;</span><br><span class="line">    assign-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (application &gt; head-&gt;size || application &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        assign-&gt;address = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> assign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    before = head;</span><br><span class="line">    after = head-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (way == <span class="string">&#x27;f&#x27;</span>) &#123; <span class="comment">// First-Fit</span></span><br><span class="line">        <span class="keyword">while</span> (after != <span class="literal">NULL</span> &amp;&amp; after-&gt;size &lt; application) &#123;</span><br><span class="line">            before = before-&gt;next;</span><br><span class="line">            after = after-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="string">&#x27;b&#x27;</span>) &#123; <span class="comment">// Best-Fit</span></span><br><span class="line">        RECT *bestBefore = <span class="literal">NULL</span>, *bestAfter = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> minSize = MAX + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (after != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (after-&gt;size &gt;= application &amp;&amp; after-&gt;size &lt; minSize) &#123;</span><br><span class="line">                minSize = after-&gt;size;</span><br><span class="line">                bestBefore = before;</span><br><span class="line">                bestAfter = after;</span><br><span class="line">            &#125;</span><br><span class="line">            before = before-&gt;next;</span><br><span class="line">            after = after-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        before = bestBefore;</span><br><span class="line">        after = bestAfter;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (way == <span class="string">&#x27;w&#x27;</span>) &#123; <span class="comment">// Worst-Fit</span></span><br><span class="line">        RECT *worstBefore = <span class="literal">NULL</span>, *worstAfter = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> maxSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (after != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (after-&gt;size &gt; maxSize) &#123;</span><br><span class="line">                maxSize = after-&gt;size;</span><br><span class="line">                worstBefore = before;</span><br><span class="line">                worstAfter = after;</span><br><span class="line">            &#125;</span><br><span class="line">            before = before-&gt;next;</span><br><span class="line">            after = after-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        before = worstBefore;</span><br><span class="line">        after = worstAfter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (after == <span class="literal">NULL</span> || after-&gt;size &lt; application) &#123;</span><br><span class="line">        assign-&gt;address = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> assign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (after-&gt;size == application) &#123;</span><br><span class="line">        <span class="keyword">if</span> (after-&gt;size == head-&gt;size) maxblocknum--;</span><br><span class="line">        before-&gt;next = after-&gt;next;</span><br><span class="line">        assign-&gt;address = after-&gt;address;</span><br><span class="line">        <span class="built_in">free</span>(after);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (after-&gt;size == head-&gt;size) maxblocknum--;</span><br><span class="line">        after-&gt;size = after-&gt;size - application;</span><br><span class="line">        assign-&gt;address = after-&gt;address + after-&gt;size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assign-&gt;next = heada-&gt;next;</span><br><span class="line">    heada-&gt;next = assign;</span><br><span class="line">    heada-&gt;size++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> assign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------首次适应算法------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">firstfit</span><span class="params">(RECT *head, RECT *heada, RECT *back1)</span> &#123;</span><br><span class="line">    RECT *before, *after, *back2;</span><br><span class="line">    <span class="type">int</span> insert, del;</span><br><span class="line">    back2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(RECT));</span><br><span class="line">    back2-&gt;address = back1-&gt;address;</span><br><span class="line">    back2-&gt;size = back1-&gt;size;</span><br><span class="line">    back2-&gt;next = back1-&gt;next;</span><br><span class="line"></span><br><span class="line">    before = head;</span><br><span class="line">    after = head-&gt;next;</span><br><span class="line">    insert = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!insert) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((after == <span class="literal">NULL</span>) || ((back1-&gt;address &lt;= after-&gt;address) &amp;&amp; (back1-&gt;address &gt;= before-&gt;address))) &#123;</span><br><span class="line">            before-&gt;next = back1;</span><br><span class="line">            back1-&gt;next = after;</span><br><span class="line">            insert = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            before = before-&gt;next;</span><br><span class="line">            after = after-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (back1-&gt;address == before-&gt;address + before-&gt;size) &#123;</span><br><span class="line">        before-&gt;size = before-&gt;size + back1-&gt;size;</span><br><span class="line">        before-&gt;next = back1-&gt;next;</span><br><span class="line">        back1 = before;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((after != <span class="literal">NULL</span>) &amp;&amp; (after-&gt;address == back1-&gt;address + back1-&gt;size)) &#123;</span><br><span class="line">        back1-&gt;size = back1-&gt;size + after-&gt;size;</span><br><span class="line">        back1-&gt;next = after-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(after);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head-&gt;size &lt; back1-&gt;size) &#123;</span><br><span class="line">        head-&gt;size = back1-&gt;size;</span><br><span class="line">        maxblocknum = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head-&gt;size == back1-&gt;size) &#123;</span><br><span class="line">        maxblocknum++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    before = heada;</span><br><span class="line">    after = heada-&gt;next;</span><br><span class="line">    del = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!del &amp;&amp; after != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((after-&gt;address == back2-&gt;address) &amp;&amp; (after-&gt;size == back2-&gt;size)) &#123;</span><br><span class="line">            before-&gt;next = after-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(after);</span><br><span class="line">            del = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            before = before-&gt;next;</span><br><span class="line">            after = after-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    heada-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------最佳适应算法------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bestfit</span><span class="params">(RECT *head, RECT *heada, RECT *back1)</span> &#123;</span><br><span class="line">    <span class="comment">// 与firstfit相同，只是分配策略不同，这里为了简洁省略</span></span><br><span class="line">    firstfit(head, heada, back1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------最坏适应算法------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">worstfit</span><span class="params">(RECT *head, RECT *heada, RECT *back1)</span> &#123;</span><br><span class="line">    <span class="comment">// 与firstfit相同，只是分配策略不同，这里为了简洁省略</span></span><br><span class="line">    firstfit(head, heada, back1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------回收块合法性检查------------*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">backcheck</span><span class="params">(RECT *head, RECT *back1)</span> &#123;</span><br><span class="line">    RECT *before;</span><br><span class="line">    <span class="type">int</span> check = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (back1-&gt;address &lt; <span class="number">0</span> || back1-&gt;size &lt; <span class="number">0</span>) check = <span class="number">0</span>;</span><br><span class="line">    before = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> ((before != <span class="literal">NULL</span>) &amp;&amp; check) &#123;</span><br><span class="line">        <span class="keyword">if</span> (((back1-&gt;address &lt; before-&gt;address) &amp;&amp; (back1-&gt;address + back1-&gt;size &gt; before-&gt;address)) ||</span><br><span class="line">            ((back1-&gt;address &gt;= before-&gt;address) &amp;&amp; (back1-&gt;address &lt; before-&gt;address + before-&gt;size))) &#123;</span><br><span class="line">            check = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            before = before-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Error input!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> check;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------打印输出链表------------*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(RECT *output)</span> &#123;</span><br><span class="line">    RECT *before;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    before = output-&gt;next;</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (output-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NO part for print!\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;index    address    end    size\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (before != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-9d%-9d%-9d%-9d\n&quot;</span>, index, before-&gt;address, before-&gt;address + before-&gt;size - <span class="number">1</span>, before-&gt;size);</span><br><span class="line">            index++;</span><br><span class="line">            before = before-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc test5.c -o test5</span><br><span class="line">./test5</span><br></pre></td></tr></table></figure><h2 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h2><p><code>gedit test5_2.c</code></p><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TOTAL_INSTRUCTION 320</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TOTAL_VP 32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> pn; <span class="comment">// 页号</span></span><br><span class="line">    <span class="type">int</span> pfn; <span class="comment">// 内存块号</span></span><br><span class="line">    <span class="type">int</span> counter; <span class="comment">// 一个周期内访问页面的次数</span></span><br><span class="line">    <span class="type">int</span> time; <span class="comment">// 访问时间</span></span><br><span class="line">&#125; pl_type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pfc_struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> pn;</span><br><span class="line">    <span class="type">int</span> pfn;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pfc_struct</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; pfc_type;</span><br><span class="line"></span><br><span class="line">pl_type pl[TOTAL_VP];</span><br><span class="line">pfc_type pfc[TOTAL_VP];</span><br><span class="line">pfc_type *freepf_head;</span><br><span class="line">pfc_type *busypf_head;</span><br><span class="line">pfc_type *busypf_tail;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> diseffect;</span><br><span class="line"><span class="type">int</span> a[TOTAL_INSTRUCTION];</span><br><span class="line"><span class="type">int</span> page[TOTAL_INSTRUCTION];</span><br><span class="line"><span class="type">int</span> offset[TOTAL_INSTRUCTION];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize</span><span class="params">(<span class="type">int</span> total_pf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FIFO</span><span class="params">(<span class="type">int</span> total_pf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LRU</span><span class="params">(<span class="type">int</span> total_pf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OPT</span><span class="params">(<span class="type">int</span> total_pf)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">generate_instruction_sequence</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    generate_instruction_sequence();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将指令序列转换为页面地址流</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TOTAL_INSTRUCTION; i++) &#123;</span><br><span class="line">        page[i] = a[i] / <span class="number">10</span>;</span><br><span class="line">        offset[i] = a[i] % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户工作区从4个页面变换到32个页面</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">4</span>; i &lt;= <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d page frames: &quot;</span>, i);</span><br><span class="line">        FIFO(i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; FIFO &quot;</span>);</span><br><span class="line">        LRU(i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; LRU &quot;</span>);</span><br><span class="line">        OPT(i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; OPT\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">generate_instruction_sequence</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> s, i;</span><br><span class="line">    srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TOTAL_INSTRUCTION; i += <span class="number">4</span>) &#123;</span><br><span class="line">        s = (<span class="type">float</span>)<span class="number">319</span> * rand() / RAND_MAX / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s &lt; <span class="number">0</span> || s &gt; <span class="number">319</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;When i == %d, Error, s == %d\n&quot;</span>, i, s);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = s;</span><br><span class="line">        a[i + <span class="number">1</span>] = a[i] + <span class="number">1</span>;</span><br><span class="line">        a[i + <span class="number">2</span>] = (<span class="type">float</span>)a[i] * rand() / RAND_MAX / <span class="number">2</span>;</span><br><span class="line">        a[i + <span class="number">3</span>] = a[i + <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">        s = (<span class="type">float</span>)(<span class="number">318</span> - a[i + <span class="number">2</span>]) * rand() / RAND_MAX / <span class="number">2</span> + a[i + <span class="number">2</span>] + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> ((a[i + <span class="number">2</span>] &gt; <span class="number">318</span>) || (s &gt; <span class="number">319</span>)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;a[%d + 2], a number which is: %d and s == %d\n&quot;</span>, i, a[i + <span class="number">2</span>], s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initialize</span><span class="params">(<span class="type">int</span> total_pf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    diseffect = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TOTAL_VP; i++) &#123;</span><br><span class="line">        pl[i].pn = i;</span><br><span class="line">        pl[i].pfn = INVALID;</span><br><span class="line">        pl[i].counter = <span class="number">0</span>;</span><br><span class="line">        pl[i].time = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; total_pf - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        pfc[i].next = &amp;pfc[i + <span class="number">1</span>];</span><br><span class="line">        pfc[i].pfn = i;</span><br><span class="line">    &#125;</span><br><span class="line">    pfc[total_pf - <span class="number">1</span>].next = <span class="literal">NULL</span>;</span><br><span class="line">    pfc[total_pf - <span class="number">1</span>].pfn = total_pf - <span class="number">1</span>;</span><br><span class="line">    freepf_head = &amp;pfc[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">FIFO</span><span class="params">(<span class="type">int</span> total_pf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    pfc_type *p;</span><br><span class="line"></span><br><span class="line">    initialize(total_pf);</span><br><span class="line">    busypf_head = busypf_tail = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TOTAL_INSTRUCTION; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pl[page[i]].pfn == INVALID) &#123;</span><br><span class="line">            diseffect += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (freepf_head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                p = busypf_head-&gt;next;</span><br><span class="line">                pl[busypf_head-&gt;pn].pfn = INVALID;</span><br><span class="line">                freepf_head = busypf_head;</span><br><span class="line">                freepf_head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                busypf_head = p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = freepf_head-&gt;next;</span><br><span class="line">            freepf_head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            freepf_head-&gt;pn = page[i];</span><br><span class="line">            pl[page[i]].pfn = freepf_head-&gt;pfn;</span><br><span class="line">            <span class="keyword">if</span> (busypf_tail == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                busypf_head = busypf_tail = freepf_head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                busypf_tail-&gt;next = freepf_head;</span><br><span class="line">                busypf_tail = freepf_head;</span><br><span class="line">            &#125;</span><br><span class="line">            freepf_head = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;FIFO: %6.4f &quot;</span>, <span class="number">1</span> - (<span class="type">float</span>)diseffect / TOTAL_INSTRUCTION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LRU</span><span class="params">(<span class="type">int</span> total_pf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, min, minj;</span><br><span class="line">    initialize(total_pf);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TOTAL_INSTRUCTION; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pl[page[i]].pfn == INVALID) &#123;</span><br><span class="line">            diseffect += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (freepf_head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>, min = <span class="number">32767</span>; j &lt; total_pf; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pl[pfc[j].pn].time &lt; min) &#123;</span><br><span class="line">                        min = pl[pfc[j].pn].time;</span><br><span class="line">                        minj = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                freepf_head = &amp;pfc[minj];</span><br><span class="line">                pl[freepf_head-&gt;pn].pfn = INVALID;</span><br><span class="line">            &#125;</span><br><span class="line">            freepf_head-&gt;pn = page[i];</span><br><span class="line">            pl[page[i]].pfn = freepf_head-&gt;pfn;</span><br><span class="line">            freepf_head = freepf_head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pl[page[i]].time = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;LRU: %6.4f &quot;</span>, <span class="number">1</span> - (<span class="type">float</span>)diseffect / TOTAL_INSTRUCTION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OPT</span><span class="params">(<span class="type">int</span> total_pf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j, max, maxj, temp;</span><br><span class="line">    initialize(total_pf);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TOTAL_INSTRUCTION; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pl[page[i]].pfn == INVALID) &#123;</span><br><span class="line">            diseffect += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (freepf_head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>, max = <span class="number">-1</span>; j &lt; total_pf; j++) &#123;</span><br><span class="line">                    temp = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> k = i + <span class="number">1</span>; k &lt; TOTAL_INSTRUCTION; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (page[k] == pfc[j].pn) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        temp++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (temp &gt; max) &#123;</span><br><span class="line">                        max = temp;</span><br><span class="line">                        maxj = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                freepf_head = &amp;pfc[maxj];</span><br><span class="line">                pl[freepf_head-&gt;pn].pfn = INVALID;</span><br><span class="line">            &#125;</span><br><span class="line">            freepf_head-&gt;pn = page[i];</span><br><span class="line">            pl[page[i]].pfn = freepf_head-&gt;pfn;</span><br><span class="line">            freepf_head = freepf_head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;OPT: %6.4f &quot;</span>, <span class="number">1</span> - (<span class="type">float</span>)diseffect / TOTAL_INSTRUCTION);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc test5_2.c -o test5_2</span><br><span class="line">./test5_2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验4.2</title>
      <link href="/2024/10/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C4.2/"/>
      <url>/2024/10/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C4.2/</url>
      
        <content type="html"><![CDATA[<h4 id="1-在虚拟机上安装必要的工具"><a href="#1-在虚拟机上安装必要的工具" class="headerlink" title="1. 在虚拟机上安装必要的工具"></a>1. 在虚拟机上安装必要的工具</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><h4 id="2-编写C程序"><a href="#2-编写C程序" class="headerlink" title="2. 编写C程序"></a>2. 编写C程序</h4><p><code>mkdir sync.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  <span class="comment">// 添加这个头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 256</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *buffer;</span><br><span class="line"><span class="type">sem_t</span> empty;</span><br><span class="line"><span class="type">sem_t</span> full;</span><br><span class="line"><span class="type">sem_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sem_wait(&amp;empty); <span class="comment">// empty的P操作</span></span><br><span class="line">        sem_wait(&amp;mutex); <span class="comment">// mutex的P操作</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input something to buffer: &quot;</span>);</span><br><span class="line">        buffer = (<span class="type">char</span> *)<span class="built_in">malloc</span>(MAX);</span><br><span class="line">        fgets(buffer, MAX, <span class="built_in">stdin</span>); <span class="comment">// 输入产品至缓冲区</span></span><br><span class="line">        sem_post(&amp;mutex); <span class="comment">// mutex的V操作</span></span><br><span class="line">        sem_post(&amp;full);  <span class="comment">// full的V操作</span></span><br><span class="line">        sleep(<span class="number">1</span>);  <span class="comment">// 生产一个产品后等待1秒，模拟生产过程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sem_wait(&amp;full); <span class="comment">// full的P操作</span></span><br><span class="line">        sem_wait(&amp;mutex); <span class="comment">// mutex的P操作</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;read product from buffer: %s&quot;</span>, buffer); <span class="comment">// 从缓冲区中取出产品</span></span><br><span class="line">        <span class="built_in">memset</span>(buffer, <span class="number">0</span>, MAX); <span class="comment">// 清空缓冲区</span></span><br><span class="line">        <span class="built_in">free</span>(buffer);</span><br><span class="line">        sem_post(&amp;mutex); <span class="comment">// mutex的V操作</span></span><br><span class="line">        sem_post(&amp;empty); <span class="comment">// empty的V操作</span></span><br><span class="line">        sleep(<span class="number">1</span>);  <span class="comment">// 消费一个产品后等待1秒，模拟消费过程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> id_producer, id_consumer;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化信号量</span></span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">// 设置empty的初值为10</span></span><br><span class="line">    sem_init(&amp;full, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">// 设置full的初值为0</span></span><br><span class="line">    sem_init(&amp;mutex, <span class="number">0</span>, <span class="number">1</span>);  <span class="comment">// 设置mutex的初值为1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建生产者进程</span></span><br><span class="line">    ret = pthread_create(&amp;id_producer, <span class="literal">NULL</span>, producer, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Producer creation failed\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建消费者进程</span></span><br><span class="line">    ret = pthread_create(&amp;id_consumer, <span class="literal">NULL</span>, consumer, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Consumer creation failed\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待生产者进程结束</span></span><br><span class="line">    pthread_join(id_producer, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 等待消费者进程结束</span></span><br><span class="line">    pthread_join(id_consumer, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除信号量</span></span><br><span class="line">    sem_destroy(&amp;empty);</span><br><span class="line">    sem_destroy(&amp;full);</span><br><span class="line">    sem_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The End...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-编译和运行程序"><a href="#3-编译和运行程序" class="headerlink" title="3. 编译和运行程序"></a>3. 编译和运行程序</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc sync.c -lpthread -o <span class="built_in">sync</span></span><br><span class="line">./sync</span><br></pre></td></tr></table></figure><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input something to buffer:The first product.</span><br><span class="line">read product from buffer:The first product.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验4.1</title>
      <link href="/2024/10/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C4.1/"/>
      <url>/2024/10/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C4.1/</url>
      
        <content type="html"><![CDATA[<h4 id="Step-1-安装必要的工具"><a href="#Step-1-安装必要的工具" class="headerlink" title="Step 1: 安装必要的工具"></a>Step 1: 安装必要的工具</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><h4 id="Step-2-创建和编辑源代码文件"><a href="#Step-2-创建和编辑源代码文件" class="headerlink" title="Step 2: 创建和编辑源代码文件"></a>Step 2: 创建和编辑源代码文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit rps_game.c</span><br></pre></td></tr></table></figure><p>将下面的代码粘贴进去，然后保存并退出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROCK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAPER 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCISSORS 2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Game</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> type;</span><br><span class="line">    <span class="type">int</span> round;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">result_send</span><span class="params">(<span class="type">int</span> msgid)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Game</span> <span class="title">game</span>;</span></span><br><span class="line">    game.type = <span class="number">1</span>;</span><br><span class="line">    game.round = rand() % <span class="number">3</span>;</span><br><span class="line">    msgsnd(msgid, &amp;game, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">result_announce</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((a + <span class="number">1</span>) % <span class="number">3</span> == b) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// A wins</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a == b) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// Draw</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// B wins</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_results</span><span class="params">(<span class="type">int</span> *result_list, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> countA = <span class="number">0</span>, countB = <span class="number">0</span>, pingju = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (result_list[i]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>: </span><br><span class="line">                countA++; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;NO.%d:A win\n&quot;</span>, i + <span class="number">1</span>); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:  </span><br><span class="line">                pingju++; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;NO.%d:end in a draw\n&quot;</span>, i + <span class="number">1</span>); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">                countB++; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;NO.%d:B win\n&quot;</span>, i + <span class="number">1</span>); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The final result is A win:%ds\nB win:%ds\nend in a draw %ds\n&quot;</span>, countA, countB, pingju);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> times;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Game start, please input rounds: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;times);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *result_list = (<span class="type">int</span>*)<span class="built_in">malloc</span>(times * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> msgid1 = msgget(<span class="number">1234</span>, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line">    <span class="type">int</span> msgid2 = msgget(<span class="number">5678</span>, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid1 = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid1 == <span class="number">0</span>) &#123;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>) * <span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++) result_send(msgid1);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid2 = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid2 == <span class="number">0</span>) &#123;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++) result_send(msgid2);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Game</span> <span class="title">game1</span>, <span class="title">game2</span>;</span></span><br><span class="line">        msgrcv(msgid1, &amp;game1, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        msgrcv(msgid2, &amp;game2, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        result_list[i] = result_announce(game1.round, game2.round);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print_results(result_list, times);</span><br><span class="line"></span><br><span class="line">    msgctl(msgid1, IPC_RMID, <span class="number">0</span>);</span><br><span class="line">    msgctl(msgid2, IPC_RMID, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(result_list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Step-3-编译源代码"><a href="#Step-3-编译源代码" class="headerlink" title="Step 3: 编译源代码"></a>Step 3: 编译源代码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o rps_game rps_game.c</span><br></pre></td></tr></table></figure><h4 id="Step-4-运行程序"><a href="#Step-4-运行程序" class="headerlink" title="Step 4: 运行程序"></a>Step 4: 运行程序</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rps_game</span><br></pre></td></tr></table></figure><p>程序会提示你输入比赛轮数，例如输入 <code>10</code>，然后程序将执行并在终端打印每轮比赛结果和最终统计结果。</p><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><p>运行程序后，如果输入 <code>10</code> 作为比赛轮数，则输出结果将类似以下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Game start, please input rounds: 10</span><br><span class="line">NO.1:end in a draw</span><br><span class="line">NO.2:A win</span><br><span class="line">NO.3:A win</span><br><span class="line">NO.4:B win</span><br><span class="line">NO.5:A win</span><br><span class="line">NO.6:B win</span><br><span class="line">NO.7:B win</span><br><span class="line">NO.8:end in a draw</span><br><span class="line">NO.9:end in a draw</span><br><span class="line">NO.10:B win</span><br><span class="line">The final result is A win:3s</span><br><span class="line">B win:4s</span><br><span class="line">end in a draw 3s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验3.2</title>
      <link href="/2024/09/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C3.2/"/>
      <url>/2024/09/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C3.2/</url>
      
        <content type="html"><![CDATA[<p>1.打开终端，<code>gedit scheduler.c</code>，输入以下内容，保存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义进程控制块</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];       <span class="comment">// 进程名</span></span><br><span class="line">    <span class="type">char</span> state;          <span class="comment">// 进程状态：&#x27;W&#x27;表示就绪，&#x27;R&#x27;表示运行，&#x27;F&#x27;表示完成</span></span><br><span class="line">    <span class="type">int</span> nice;            <span class="comment">// 进程优先数</span></span><br><span class="line">    <span class="type">int</span> ntime;           <span class="comment">// 需要运行的时间</span></span><br><span class="line">    <span class="type">int</span> rtime;           <span class="comment">// 已经运行的时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span>* <span class="title">link</span>;</span>    <span class="comment">// 指向下一个进程控制块的指针</span></span><br><span class="line">&#125; PCB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量，指向就绪队列的头</span></span><br><span class="line">PCB *ready = <span class="literal">NULL</span>, *p;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程优先数排序函数，优先数大者优先，并生成就绪队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">()</span> &#123;</span><br><span class="line">    PCB *first, *second;</span><br><span class="line">    <span class="type">int</span> insert = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((ready == <span class="literal">NULL</span>) || (p-&gt;nice &gt; ready-&gt;nice)) &#123;</span><br><span class="line">        <span class="comment">// 优先数最大者插入队首</span></span><br><span class="line">        p-&gt;link = ready;</span><br><span class="line">        ready = p;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对进程比较优先数，并调整它们的位置</span></span><br><span class="line">        first = ready;</span><br><span class="line">        second = first-&gt;link;</span><br><span class="line">        <span class="keyword">while</span> (second != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;nice &gt; second-&gt;nice) &#123; <span class="comment">// 若插入的进程比当前进程的优先数大</span></span><br><span class="line">                p-&gt;link = second;</span><br><span class="line">                first-&gt;link = p; <span class="comment">// 插到当前进程的前面</span></span><br><span class="line">                second = <span class="literal">NULL</span>;</span><br><span class="line">                insert = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                first = first-&gt;link;</span><br><span class="line">                second = second-&gt;link;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若插入的进程优先数最小，则插到队尾</span></span><br><span class="line">        <span class="keyword">if</span> (insert == <span class="number">0</span>) first-&gt;link = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入各个进程参数，建立进程控制块并排序生成就绪队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入被调度的进程数目：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n进程号No.%d:&quot;</span>, i);</span><br><span class="line">        p = (PCB*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n输入进程名：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, p-&gt;name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入进程优先数：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;nice);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入进程运行时间：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;ntime);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        p-&gt;rtime = <span class="number">0</span>;</span><br><span class="line">        p-&gt;state = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">        p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">        sort(); <span class="comment">// 调用sort()函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表中节点个数的统计函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">space</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    PCB* pr = ready;</span><br><span class="line">    <span class="keyword">while</span> (pr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        pr = pr-&gt;link;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程显示函数，用于显示当前进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">disp</span><span class="params">(PCB *pr)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n name \t state \t nice \t ntime \t rtime \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\t&quot;</span>, pr-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\t&quot;</span>, pr-&gt;state);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, pr-&gt;nice);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, pr-&gt;ntime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, pr-&gt;rtime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程查看函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check</span><span class="params">()</span> &#123;</span><br><span class="line">    PCB* pr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n**** 当前正在运行的进程是：%s&quot;</span>, p-&gt;name);</span><br><span class="line">    disp(p);</span><br><span class="line">    pr = ready;</span><br><span class="line">    <span class="keyword">if</span> (pr != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n**** 当前就绪队列状态为：&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n**** 当前就绪队列状态为：空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (pr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        disp(pr);</span><br><span class="line">        pr = pr-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立进程撤销函数（进程运行结束，撤销进程）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;进程 [%s] 已完成.\n&quot;</span>, p-&gt;name);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立进程就绪函数（进程运行时间到，设置进程处于就绪状态）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">running</span><span class="params">()</span> &#123;</span><br><span class="line">    p-&gt;rtime++;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;rtime == p-&gt;ntime) &#123;</span><br><span class="line">        p-&gt;state = <span class="string">&#x27;F&#x27;</span>; <span class="comment">// 运行结束</span></span><br><span class="line">        destroy(); <span class="comment">// 调用destroy()函数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p-&gt;nice--; <span class="comment">// 优先数降低一级</span></span><br><span class="line">        p-&gt;state = <span class="string">&#x27;W&#x27;</span>; <span class="comment">// 重新进入就绪队列</span></span><br><span class="line">        sort(); <span class="comment">// 调用sort()函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> len, h = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    input(); <span class="comment">// 输入进程信息</span></span><br><span class="line">    len = space(); <span class="comment">// 获取就绪队列长度</span></span><br><span class="line">    <span class="keyword">while</span> ((len != <span class="number">0</span>) &amp;&amp; (ready != <span class="literal">NULL</span>)) &#123;</span><br><span class="line">        ch = getchar();</span><br><span class="line">        h++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n The execute number: %d&quot;</span>, h);</span><br><span class="line">        p = ready;</span><br><span class="line">        ready = p-&gt;link;</span><br><span class="line">        p-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;state = <span class="string">&#x27;R&#x27;</span>;</span><br><span class="line">        check();</span><br><span class="line">        running();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n按任意键继续......&quot;</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">        len = space(); <span class="comment">// 更新就绪队列长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n所有进程已经运行完成！\n&quot;</span>);</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在命令行中编译代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o scheduler scheduler.c</span><br></pre></td></tr></table></figure><p>3.运行程序：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scheduler</span><br></pre></td></tr></table></figure><p>根据提示输入进程数目、进程名、优先数和运行时间，程序将模拟进程调度并输出每次调度的结果，直到所有进程完成。</p><p>照书抄的内容，可参考：<br><img src="assets/image-20240928090657134.png" alt="image-20240928090657134" style="zoom: 67%;" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验3.1</title>
      <link href="/2024/09/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C3.1/"/>
      <url>/2024/09/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C3.1/</url>
      
        <content type="html"><![CDATA[<h3 id="实验内容（1）"><a href="#实验内容（1）" class="headerlink" title="实验内容（1）"></a>实验内容（1）</h3><p>1.将下面代码写入<code>experiment1.c</code>，命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit experiment1.c</span><br></pre></td></tr></table></figure><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">int</span> retval;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建一个新进程 */</span></span><br><span class="line">    childpid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (childpid &gt;= <span class="number">0</span>) &#123; <span class="comment">// fork() 成功</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">0</span>) &#123; <span class="comment">// 子进程</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CHILD: I am the child process!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Here&#x27;s my PID: %d\n&quot;</span>, getpid());</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CHILD: My parent&#x27;s PID is: %d\n&quot;</span>, getppid());</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CHILD: The value of fork return is: %d\n&quot;</span>, childpid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Sleep for 1 second...\n&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Enter an exit value (0~255): &quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;retval);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Goodbye!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(retval);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 父进程</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: I am the parent process!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: Here&#x27;s my PID: %d\n&quot;</span>, getpid());</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: The value of my child&#x27;s PID is: %d\n&quot;</span>, childpid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: I will now wait for my child to exit.\n&quot;</span>);</span><br><span class="line">            wait(&amp;status);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: Child&#x27;s exit code is: %d\n&quot;</span>, WEXITSTATUS(status));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: Goodbye!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// fork() 失败</span></span><br><span class="line">        perror(<span class="string">&quot;fork error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译和运行程序："><a href="#编译和运行程序：" class="headerlink" title="编译和运行程序："></a>编译和运行程序：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -o experiment1 experiment1.c</span><br><span class="line">./experiment1</span><br></pre></td></tr></table></figure><h3 id="实验内容（2）"><a href="#实验内容（2）" class="headerlink" title="实验内容（2）"></a>实验内容（2）</h3><p>1.将下面代码写入<code>experiment2.c</code>，命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit experiment2.c</span><br></pre></td></tr></table></figure><h4 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建一个新进程 */</span></span><br><span class="line">    childpid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (childpid &gt;= <span class="number">0</span>) &#123; <span class="comment">// fork() 成功</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">0</span>) &#123; <span class="comment">// 子进程</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;CHILD: I am the child process! Executing &#x27;ls&#x27; command.\n&quot;</span>);</span><br><span class="line">            execlp(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">            perror(<span class="string">&quot;execlp error!&quot;</span>); <span class="comment">// 如果execlp失败，将输出错误信息</span></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 父进程</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: I am the parent process!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: Here&#x27;s my PID: %d\n&quot;</span>, getpid());</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: The value of my child&#x27;s PID is: %d\n&quot;</span>, childpid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: I will now wait for my child to exit.\n&quot;</span>);</span><br><span class="line">            wait(&amp;status);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: Child terminated.\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;PARENT: Goodbye!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// fork() 失败</span></span><br><span class="line">        perror(<span class="string">&quot;fork error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译和运行程序：-1"><a href="#编译和运行程序：-1" class="headerlink" title="编译和运行程序："></a>编译和运行程序：</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -o experiment2 experiment2.c</span><br><span class="line">./experiment2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>云计算实验2</title>
      <link href="/2024/09/24/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%AE%9E%E9%AA%8C2/"/>
      <url>/2024/09/24/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%AE%9E%E9%AA%8C2/</url>
      
        <content type="html"><![CDATA[<p>实验要求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 创建目录结构:</span><br><span class="line">~<span class="regexp">/test1/</span><span class="title class_">Hello</span>.<span class="property">java</span></span><br><span class="line">~<span class="regexp">/test2/</span><span class="title class_">Hello</span>.<span class="property">java</span></span><br><span class="line">~<span class="regexp">/test3/</span><span class="title class_">Hello</span>.<span class="property">java</span></span><br><span class="line"></span><br><span class="line">其中<span class="title class_">Hello</span>.<span class="property">java</span>为输出<span class="string">&quot;Hello World!&quot;</span>的功能的源代码</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> ~<span class="regexp">/test2/</span><span class="title class_">Hello</span>.<span class="property">java</span> 重命名为 ~<span class="regexp">/test2/</span><span class="title class_">World</span>.<span class="property">java</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 创建新用户 user1, 密码设为 <span class="number">111111</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#创建三个文件夹</span><br><span class="line"><span class="built_in">mkdir</span> -p ~/test1 ~/test2 ~/test3</span><br><span class="line">#写入内容到Hello.java</span><br><span class="line"><span class="built_in">echo</span> &#x27;public class Hello &#123;</span><br><span class="line">&gt;     public static void main(String[] args) &#123;</span><br><span class="line">&gt;         System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;&#x27; &gt; ~/test1/Hello.java</span><br><span class="line">#复制test1内容到test2/<span class="number">3</span></span><br><span class="line">cp ~/test1/Hello.java ~/test2/Hello.java</span><br><span class="line">cp ~/test1/Hello.java ~/test3/Hello.java</span><br></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#重命名</span><br><span class="line">mv ~/test2/Hello.java ~/test2/World.java</span><br></pre></td></tr></table></figure><ol start="3"><li></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#切换到root用户</span><br><span class="line">su -</span><br><span class="line"></span><br><span class="line">#创建新用户 </span><br><span class="line">useradd user1</span><br><span class="line"></span><br><span class="line">#设置密码 </span><br><span class="line"><span class="built_in">echo</span> &quot;user1:<span class="number">111111</span>&quot; | chpasswd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES601</title>
      <link href="/2023/10/18/ES61/"/>
      <url>/2023/10/18/ES61/</url>
      
        <content type="html"><![CDATA[<h1 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var let const"></a>var let const</h1><h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2><ul><li>在全局作用域声明</li><li>存在变量提升</li><li>可以对变量进行重载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虽然a的变量得到提升，但是是未赋值的，因此输出undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="string">&#x27;10/17&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对比let</span></span><br><span class="line"><span class="comment">//let、const不存在变量提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">let</span> year = <span class="string">&#x27;2023&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><ul><li><p>只在块作用域内有效，块作用域外访问报错</p></li><li><p>只能声明一次</p></li><li><p>存在暂时性死区(temporary died zone)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// TDZ开始</span></span><br><span class="line">  tmp = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// ReferenceError</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">let</span> tmp; <span class="comment">// TDZ结束</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// undefined</span></span><br><span class="line">  tmp = <span class="number">123</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ul><li><p>指定义一个常量，且定义时必须赋值</p></li><li><p>只在块作用域内有效</p></li></ul><h2 id="循环计数器-var与let"><a href="#循环计数器-var与let" class="headerlink" title="循环计数器(var与let)"></a>循环计数器(var与let)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出十个 10</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 0123456789</span></span><br></pre></td></tr></table></figure><p>变量<code>i</code>是<code>var</code>命令声明的，在全局范围内都有效，所以全局只有一个变量<code>i</code>。也就是说，所有数组<code>a</code>的成员里面的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是 10。</p><p>变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环有效，所以每一次循环的<code>i</code>其实都是一个新的变量，所以最后输出的是<code>6</code>。</p><h2 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h2><p>用var和function声明的变量，都是顶层对象windows的属性。而let、const声明的属性不再是顶层对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果在 Node 的 REPL 环境，可以写成 global.a</span></span><br><span class="line"><span class="comment">// 或者采用通用方法，写成 this.a</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">b</span> <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>​    是对赋值运算的一种扩展,是代码简洁易读，针对的对象是数组和对象</p><ul><li><h2 id="对对象解构"><a href="#对对象解构" class="headerlink" title="对对象解构"></a>对对象解构</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;iden&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es5写法</span></span><br><span class="line"><span class="keyword">let</span> type = node.<span class="property">type</span>;</span><br><span class="line"><span class="keyword">let</span> name = node.<span class="property">name</span>;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="comment">//完全解构</span></span><br><span class="line"><span class="keyword">let</span>&#123;type,name&#125; = node;</span><br><span class="line"><span class="keyword">let</span> obj =&#123;</span><br><span class="line">    <span class="attr">a</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">b</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    <span class="attr">c</span>:<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;a,b&#125;=obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不完全解构</span></span><br><span class="line"><span class="keyword">let</span> &#123;a&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//剩余运算符rest</span></span><br><span class="line"><span class="comment">//剩余的内容被作为一个对象赋值给rest</span></span><br><span class="line"><span class="keyword">let</span> &#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>,<span class="attr">e</span>:<span class="number">50</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,rest);  <span class="comment">//rest输出&#123;c: 30, d: 40,e:50&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>&#123;a,b=<span class="number">20</span>&#125;=&#123;<span class="attr">a</span>:<span class="number">20</span>&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h2 id="对数组解构"><a href="#对数组解构" class="headerlink" title="对数组解构"></a>对数组解构</h2></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完全解构</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [a,b,c] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)<span class="comment">//1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不完全解构</span></span><br><span class="line"><span class="keyword">let</span> [a,b] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b)<span class="comment">//1,2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可嵌套</span></span><br><span class="line"><span class="keyword">let</span>[a,[b],c] = [<span class="number">1</span>,[<span class="number">2</span>],<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h1 id="扩展的对象功能"><a href="#扩展的对象功能" class="headerlink" title="扩展的对象功能"></a>扩展的对象功能</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;空羽&quot;</span>,</span><br><span class="line">age = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性名和属性值相同可以省略</span></span><br><span class="line"><span class="keyword">const</span> person=&#123;</span><br><span class="line">    <span class="comment">//name:name,</span></span><br><span class="line">    name,</span><br><span class="line">    <span class="comment">//age:age,</span></span><br><span class="line">    age,</span><br><span class="line">    <span class="comment">//sayName:function()&#123;</span></span><br><span class="line">    <span class="comment">//    </span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="comment">//return &#123;x:x,y:y&#125;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象属性名可以用表达式来写</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">isShow</span>:<span class="literal">true</span>,</span><br><span class="line">    [name+<span class="string">&#x27;bc&#x27;</span>] : <span class="number">1</span>,</span><br><span class="line">    [<span class="string">&#x27;f&#x27;</span>+name]()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//&#123;isShow: true, abc: 1, fa: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的is()方法，解决NaN问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>==<span class="title class_">NaN</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象的assign()方法</span></span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">b</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">c</span>:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br><span class="line"><span class="comment">//&#123;a: 1, b: 2, c: 3&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>新的原始数据类型,最大的用途：用于定义对象的私有变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="title class_">Symbol</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> name2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name===name2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;s2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);<span class="comment">//Symbol(s2) </span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">//如果使用中括号形式进行赋值，输出就一定要使用中括号</span></span><br><span class="line"><span class="comment">//也可以使用&quot;.&quot;来赋值</span></span><br><span class="line">obj[s1] = <span class="string">&#x27;空羽&#x27;</span>;<span class="comment">//obj.s1=&#x27;空羽&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[s1]);</span><br><span class="line"><span class="comment">//另外一种写法</span></span><br><span class="line"><span class="keyword">let</span> obj2=&#123;</span><br><span class="line">    [s1]:<span class="string">&#x27;呵呵&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3中使用cookie</title>
      <link href="/2023/10/17/vue3%E4%B8%AD%E4%BD%BF%E7%94%A8cookie/"/>
      <url>/2023/10/17/vue3%E4%B8%AD%E4%BD%BF%E7%94%A8cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="安装js-cookie库"><a href="#安装js-cookie库" class="headerlink" title="安装js-cookie库"></a>安装<strong>js-cookie</strong>库</h1><p><code>npm install js-cookie</code></p><h1 id="设置cookie值"><a href="#设置cookie值" class="headerlink" title="设置cookie值"></a>设置cookie值</h1><p>在需要获取cookie的页面使用<code>Cookies.set</code>方法将其储存为cookie</p><p>以登录页面为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 登录表单 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">login</span>(<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      event.<span class="title function_">preventDefault</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 处理登录逻辑，获取用户名数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> username = <span class="variable language_">this</span>.<span class="property">username</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 存储为cookie</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;username&#x27;</span>, username);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 跳转到主页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/main&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="获取cookie值"><a href="#获取cookie值" class="headerlink" title="获取cookie值"></a>获取cookie值</h1><p>在另外一个需要cookie值的页面使用<code>cookies.get</code>方法获取存储在cookie中的数据</p><p>以主页面为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome, &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取cookie中的用户名数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">username</span> = <span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;username&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django基础</title>
      <link href="/2023/10/17/001%E5%AE%89%E8%A3%85/"/>
      <url>/2023/10/17/001%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>以管理员身份运行cmd</p><p><code>pip3 install django  </code></p><p>创建一个项目</p><p><code>django-admin startproject mysite</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><ul><li>manage.py:【固定】用于启动项目</li><li>mysite&#x2F;<ul><li>asgi.py【固定】接受网络请求</li><li>wsgi.py【固定】接受网络请求</li><li>urls.py【固定】URL和函数的对应关系</li><li>settings【固定】项目配置文件</li></ul></li></ul><h1 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3<span class="number">.9</span> manage.py startapp app01</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">│  admin.py【固定】django默认提供的后台管理</span><br><span class="line">│  apps.py【固定】app启动类</span><br><span class="line">│  models.py 【重要】对数据库进行操作</span><br><span class="line">│  tests.py【固定】单元测试</span><br><span class="line">│  views.py【重要】函数</span><br><span class="line">│  __init__.py</span><br><span class="line">│</span><br><span class="line">└─migrations【固定】数据库变更记录</span><br><span class="line">        __init__.py</span><br></pre></td></tr></table></figure><ul><li>注册app:在mysite&#x2F;settings.py中注册app</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app.apps.AppConfig&#x27;</span>//注册app语句</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>配置url,编写视图函数</li></ul><p><img src="/assets/image-20231014155514531.png" alt="image-20231014155514531"></p><p><img src="/assets/image-20231014171052726.png" alt="image-20231014171052726"></p><ul><li><p>启动程序</p><ul><li><code>python manage.py runserver </code></li></ul></li><li><p>启动成功</p></li></ul><p><img src="/assets/image-20231014171127100.png" alt="image-20231014171127100"></p><p><img src="/assets/image-20231014171111727.png" alt="image-20231014171111727"></p><p>如果想再加页面，只要再添加一个url，再填写一个视图函数即可</p><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>目前我们只能返回一个文本，如果我们想返回一个html文件</p><p>views.py内使用render返回页面名称<img src="/assets/image-20231015083910480.png" alt="image-20231015083910480"></p><p>app下创建templates\页面</p><p><img src="/assets/image-20231015084004595.png" alt="image-20231015084004595"></p><p>url.py配置路由</p><p><img src="/assets/image-20231015084046950.png" alt="image-20231015084046950"></p><h1 id="静态文件的加载"><a href="#静态文件的加载" class="headerlink" title="静态文件的加载"></a>静态文件的加载</h1><p>在app目录下创建static文件夹，用于存放静态文件<img src="/assets/image-20231015084404893.png" alt="image-20231015084404893"></p><p>如果后续会对statics文件夹名称进行修改，则需配置动态路由。(若修改文件夹名称为static)</p><p>配置方法：</p><ul><li>settings.py内添加：<code>STATIC_URL = &#39;/static/&#39;</code></li><li>html模板添加：<code>&#123;% load static %&#125;</code></li><li>引用文件时的写法：eg:<code>&lt;img src=&quot;&#123;% static 'img/i.jpg' %&#125;&quot; alt=&quot;&quot;&gt;</code></li></ul><p>后端对接口的调用：</p><p><img src="/assets/image-20231015094005079.png" alt="image-20231015094005079"></p><p><img src="/assets/image-20231015094026263.png" alt="image-20231015094026263"></p><p>view.py url.py templates 浏览器映射关系</p><p><img src="/assets/image-20231015104829250.png" alt="image-20231015104829250"></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h6 id="虚拟环境中安装mysqlclient"><a href="#虚拟环境中安装mysqlclient" class="headerlink" title="虚拟环境中安装mysqlclient"></a>虚拟环境中安装mysqlclient</h6><p><code>pip install mysqlclient</code></p><h6 id="ORM可以帮助我们"><a href="#ORM可以帮助我们" class="headerlink" title="ORM可以帮助我们"></a>ORM可以帮助我们</h6><ul><li>创建、修改、删除数据库中的表【无法创建数据库】</li><li>操作表中的数据</li></ul><h6 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h6><ul><li>启动MySQL，<code>mysql -u root -p</code></li><li><code>show databases;</code></li><li><code>create database &lt;数据库名&gt; DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></li><li><code>use &lt;数据库名&gt;</code><ul><li><code>show tables</code>发现是空的</li></ul></li></ul><h6 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h6><p>settings配置数据库：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;djangolearn&#x27;</span>,<span class="comment">#数据库名</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;12345&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">#MySQL位置，这里为本机</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,<span class="comment">#服务器端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="django操作表"><a href="#django操作表" class="headerlink" title="django操作表"></a>django操作表</h6><ul><li>创建表</li><li>删除表</li><li>修改表</li></ul><p>移步models.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserInfo</span>(models.Model):<span class="comment">#要求：继承models.Model类</span></span><br><span class="line">    name = models.ChsrField(maxlength = <span class="number">32</span>)</span><br><span class="line">    password = models.CharFied</span><br><span class="line">    age = models.IntegerField()</span><br></pre></td></tr></table></figure><p>SQL语句：(未经ORM转换之前)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table app_userInfo(</span><br><span class="line">    <span class="built_in">id</span> bigint auto_increment primary kry</span><br><span class="line">    name varchar(<span class="number">32</span>)</span><br><span class="line">    password varchar(<span class="number">64</span>)</span><br><span class="line">    age <span class="built_in">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>python manage.py makemigrations</code></p><p><code>python manage.py migrate</code></p><p><img src="/assets/image-20231015173301684.png" alt="image-20231015173301684"></p><p>此处把userInfo打错了</p><p>查看第一个表</p><p><code>desc app_usertnfo</code></p><p><img src="/assets/image-20231015173500916.png" alt="image-20231015173500916"></p><p>其他的表的来源：源于django提供的其他默认的app，生成了其他的默认功能的表</p><p><img src="/assets/image-20231015173623181.png" alt="image-20231015173623181"></p><ul><li><p>添加表，只要在models里面添加类，再执行两条语句即可</p></li><li><p>删除表，删除类</p></li><li><p>添加已经存在的表的列：(表里可能有数据)</p><ul><li><p>选择一：终端给这一列添加值</p></li><li><p>选择二：在类给新列添加默认值：eg:<code>age = models.IntegerField(default=2)</code></p></li><li><p>选择三：允许新列为空：eg:<code>age = models.IntegerField(null=True,blank=True)</code></p></li></ul></li></ul><h6 id="操作表中的数据"><a href="#操作表中的数据" class="headerlink" title="操作表中的数据"></a>操作表中的数据</h6><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserTnfo.objects.create(name=<span class="string">&quot;feather&quot;</span>,password = <span class="string">&quot;12345&quot;</span>,age=<span class="number">19</span>)</span><br></pre></td></tr></table></figure><h6 id="mysql启动失败"><a href="#mysql启动失败" class="headerlink" title="mysql启动失败"></a>mysql启动失败</h6><p>Can’t connect to MySQL server on ‘localhost:3306’ (10061)</p><p>密码：12345</p><p>以管理员身份运行CMD</p><p>任务管理器内启动mySQL服务</p><h1 id="Django前后端分离"><a href="#Django前后端分离" class="headerlink" title="Django前后端分离"></a>Django前后端分离</h1><ol><li><p><strong>安装和配置 Django REST framework</strong>：</p><p>安装了 Django REST framework。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure><p>在 <code>settings.py</code> 文件中添加 <code>&#39;rest_framework&#39;</code> 到 <code>INSTALLED_APPS</code> 配置项中，以启用 DRF。</p></li><li><p><strong>创建模型</strong>：</p><p>创建一个模型来表示你的表。这个模型将定义表的结构和字段。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YourModel</span>(models.Model):</span><br><span class="line">    field1 = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    field2 = models.IntegerField()</span><br><span class="line">    <span class="comment"># 添加其他字段...</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建序列化器</strong>：</p><p>创建一个序列化器，将模型数据转换为 JSON 或其他适当的格式。创建 <code>serializers.py</code>，定义一个序列化器类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> YourModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YourModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = YourModel</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建 API 视图</strong>：</p><p>在 <code>views.py</code> 文件中创建一个 API 视图来处理对表数据的请求。可使用 DRF 的通用视图类来简化这个过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pythonfrom rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> YourModel</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> YourModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YourModelList</span>(generics.ListAPIView):</span><br><span class="line">    queryset = YourModel.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = YourModelSerializer</span><br></pre></td></tr></table></figure></li><li><p><strong>设置 URL 路由</strong>：</p><p><code>urls.py</code> 中，设置 URL 路由以映射请求到相应的 API 视图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pythonfrom django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;api/your-model/&#x27;</span>, views.YourModelList.as_view(), name=<span class="string">&#x27;your-model-list&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这将允许前端应用访问 API 数据的 URL。</p></li><li><p><strong>运行开发服务器</strong>：</p><p>运行 Django </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure></li><li><p><strong>前端项目调用 API</strong>：</p><p>前端项目可以使用 JavaScript Fetch API、Axios 或其他 HTTP 客户端库来调用 API。在前端项目中使用 API URL 来获取表的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apiUrl = <span class="string">&#x27;http://localhost:8000/api/your-model/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(apiUrl)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理从 API 获取到的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;API 请求错误:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><p>这些步骤将帮助你创建一个 API，使前端能够获取到表的内容，并以 JSON 或其他格式返回数据。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2023/09/16/2023-9-16-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/09/16/2023-9-16-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><p>记录一下学习生活<del>还在更新、完善中</del></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation Pro 17安装教程</title>
      <link href="/2023/08/09/VMware%20Workstation%20Pro%2017%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/09/VMware%20Workstation%20Pro%2017%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a><strong>一、下载</strong></h1><p>点击进入<strong>VMware官网</strong>下载 VMware Workstation 17.0 Pro</p><p><a href="https://www.vmware.com/cn/products/workstation-pro.html">Windows 虚拟机 | Workstation Pro | VMware | CN</a></p><p><img src="/assets/image-20230727185948505.png" alt="image-20230727185948505"></p><p>点击下载<strong>试用版</strong></p><p><img src="/assets/image-20230727190042234.png" alt="image-20230727190042234"></p><p>选择 <strong>左边</strong> 的 <strong>DOWNLOAD NOW &gt;</strong> 进行下载；</p><p><img src="/assets/image-20230727190309470.png" alt="image-20230727190309470"></p><p>点击<strong>立即下载</strong>，可点击浏览文件更改安装目录</p><p><img src="/assets/image-20230727190840067.png" alt="image-20230727190840067"></p><p>下载成功之后，会得到该程序，<strong>双击</strong> 进行安装；</p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a><strong>二、安装</strong></h1><p><img src="/assets/image-20230727192532545.png" alt="image-20230727192532545"></p><p>点击 <strong>下一步</strong></p><p><img src="/assets/image-20230727192740614.png" alt="image-20230727192740614"></p><p>点击<strong>接收条款</strong>，再点击<strong>下一步</strong></p><p><img src="/assets/image-20230727193201890.png" alt="image-20230727193201890"></p><p>可默认勾选，可<strong>自定义安装目录</strong>，点击<strong>下一步</strong></p><p><img src="/assets/image-20230727194222741.png" alt="image-20230727194222741"></p><p>可取消默认勾选，点击<strong>下一步</strong></p><p><img src="/assets/image-20230727194536702.png" alt="image-20230727194536702"></p><p><strong>勾选</strong>默认方式，点击<strong>下一步</strong></p><p><img src="/assets/image-20230727194626837.png" alt="image-20230727194626837"></p><p>点击 <strong>安装</strong></p><p><img src="/assets/image-20230727194817319.png" alt="image-20230727194817319"></p><p>等待安装</p><p><img src="/assets/image-20230727195149682.png" alt="image-20230727195149682"></p><p>可点击<strong>完成</strong>（试用期一个月），也可点击<strong>许可证</strong></p><p><img src="/assets/image-20230727195326884.png" alt="image-20230727190042234"></p><p><strong>输入秘钥</strong>并点击<strong>输入</strong></p><p><img src="/assets/image-20230727195501031.png" alt="image-20230727195501031"></p><p>点击<strong>完成</strong>，退出安装</p><h1 id="三、Ubuntu-22-04-Desktop的下载使用"><a href="#三、Ubuntu-22-04-Desktop的下载使用" class="headerlink" title="三、Ubuntu 22.04 Desktop的下载使用"></a><strong>三、Ubuntu 22.04 Desktop的下载使用</strong></h1><h2 id="1-Ubuntu-22-04下载"><a href="#1-Ubuntu-22-04下载" class="headerlink" title="1.Ubuntu 22.04下载"></a><strong>1.Ubuntu 22.04下载</strong></h2><p><img src="/assets/image-20230805194635833.png" alt="image-20230805194635833"></p><p>首先要下载Ubuntu 22.04的光盘镜像文件，这里建议直接绕过Ubuntu官网，来到镜像网站下载，如:<a href="https://mirror.tuna.tsinghua.edu.cn/ubuntu-releases/20.04/">https://mirror.tuna.tsinghua.edu.cn/ubuntu-releases/20.04/</a></p><h2 id="2-VMware中三种不同网络模式的概念和选择"><a href="#2-VMware中三种不同网络模式的概念和选择" class="headerlink" title="2.VMware中三种不同网络模式的概念和选择"></a><strong>2.VMware中三种不同网络模式的概念和选择</strong></h2><p>VMware提供了三种主要的网络模式，分别是<strong>桥接模式</strong>、<strong>NAT模式</strong>和<strong>仅主机模式</strong>。这些模式有助于虚拟机在物理网络中进行通信</p><h3 id="1-桥接模式"><a href="#1-桥接模式" class="headerlink" title="(1) 桥接模式"></a><strong>(1) 桥接模式</strong></h3><p>桥接模式是一种让虚拟机和物理网络中的其他设备处于同一网络段中的方式</p><p>就像你家的电脑连接到路由器上一样，虚拟机也可以连接到物理网络上。这使得虚拟机和其他设备就像在同一个家庭网络中一样，它们可以相互通信，就像同一局域网内的设备一样</p><p><strong>选择场景：</strong> 如果你想让虚拟机表现得像是物理网络上的独立设备，例如需要虚拟机有自己的IP地址，并且可以从其他设备访问虚拟机，可以选择桥接模式</p><h3 id="2-NAT模式"><a href="#2-NAT模式" class="headerlink" title="**(2)NAT模式 **"></a>**(2)NAT模式 **</h3><p>NAT模式允许虚拟机通过宿主机来访问物理网络</p><p>如果你家里只有一个公共IP地址，但你有多台设备需要连接到互联网。路由器使用NAT来将所有内部设备的通信汇总到一个IP地址上，然后将外部服务器的响应传递回正确的设备。在NAT模式下，虚拟机就好像在一个“局域网内部的局域网”中，它们共享宿主机的IP地址。需要注意的是，只有一个虚拟机可以使用NAT模式</p><p><strong>选择场景：</strong> 当你不需要虚拟机拥有自己的独立IP地址，但仍然希望它们能够访问互联网时，可以选择NAT模式</p><h3 id="3-仅主机模式"><a href="#3-仅主机模式" class="headerlink" title="**(3)仅主机模式 **"></a>**(3)仅主机模式 **</h3><p>仅主机模式是一种将虚拟机限制在宿主机内部的网络模式</p><p>在这种模式下，虚拟机只能与宿主机进行通信，无法与物理网络中的其他设备进行通信。这就像虚拟机被放置在一个与外部网络隔离的“小空间”中</p><p><strong>选择场景：</strong> 当你希望虚拟机之间可以相互通信，但又不希望它们直接与外部网络相连时，可以选择仅主机模式</p><p>VMware提供了这三种网络模式，以便根据不同的需求进行选择。<strong>桥接模式使虚拟机与外部网络连接，NAT模式使虚拟机可以通过宿主机访问互联网，而仅主机模式则在虚拟机之间创造一个私有网络空间。</strong>可根据实际需求，选择合适的网络模式</p><h2 id="3-Ubuntu-22-04安装"><a href="#3-Ubuntu-22-04安装" class="headerlink" title="3.Ubuntu 22.04安装"></a><strong>3.Ubuntu 22.04安装</strong></h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="(1)安装"></a><strong>(1)安装</strong></h3><p><img src="/assets/image-20230805195048363.png" alt="image-20230805195048363"></p><p>下载完成后，可以把 <strong>ISO</strong> 文件移动到一个专门的文件夹下存放；完成后，打开虚拟机软件，点击 <strong>创建新的虚拟机</strong> </p><p><img src="/assets/image-20230805195143861.png" alt="image-20230805195143861"></p><p>默认选择<strong>典型配置</strong>，点击<strong>下一步</strong></p><p><img src="/assets/image-20230805195240946.png" alt="image-20230805195240946"></p><p>选择<strong>安装程序光盘映像文件</strong>，点击<strong>浏览</strong>，找到刚刚下载的 Ubuntu 20.04.6，点击<strong>下一步</strong></p><p><img src="/assets/image-20230805195505234.png" alt="image-20230805195505234"></p><p>配置操作系统名称、用户名称和密码，配置完成后点击<strong>下一步</strong></p><p><img src="/assets/image-20230805195544211.png" alt="image-20230805195544211"></p><p>命名虚拟机名称及指定虚拟机位置（可点击<strong>浏览</strong>更换虚拟机位置），随后点击<strong>下一步</strong></p><p><img src="/assets/image-20230805195657004.png" alt="image-20230805195657004"></p><p>为虚拟机分配磁盘空间，这里默认分配了建议大小并按默认将虚拟磁盘拆分为多个文件，点击<strong>下一步</strong></p><p><img src="/assets/image-20230805195957591.png" alt="image-20230805195957591"></p><p>可点击<strong>自定义硬件</strong>以配置合适的内存和处理器</p><p><img src="/assets/image-20230805205525903.png" alt="image-20230805205525903"></p><p>可点击<strong>处理器</strong>指定每个处理器的内核数量，这保持了默认数量</p><p><img src="/assets/image-20230805205555979.png" alt="image-20230805205555979"></p><p>更改完成后，点击<strong>完成</strong></p><p><img src="/assets/image-20230805205627613.png" alt="image-20230805205627613"></p><p>VMware Workstation 17 Pro 完成虚拟机创建后会自动启动该虚拟机，启动后，将会开始安装 Ubuntu 22.04</p><p><img src="/assets/image-20230805210103002.png" alt="image-20230805210103002"></p><p>安装过程通常会持续一段时间，请耐心等待</p><p><img src="/assets/image-20230805213159161.png" alt="image-20230805213158607"></p><p>安装完成后会进入登录页面，输入刚才设置的<strong>密码</strong>即可</p><p><img src="/assets/image-20230805213302195.png" alt="image-20230805213302195"></p><p>进入系统可以看到一个<strong>欢迎界面</strong>询问是否要连接到在线账户，这里选择不连接，右上角点击<strong>跳过</strong></p><p><img src="/assets/image-20230805213820575.png" alt="image-20230805213820575"></p><p>之后转到 Livepatch 页面询问是否要立刻设置 Livepatch，这里不打算设置，所以点击<strong>下一步</strong></p><p><img src="/assets/image-20230805213857904.png" alt="image-20230805213857904"></p><p>之后会弹出页面询问是否要升级到 Ubuntu 22.04，这里选择<strong>不升级</strong></p><p><img src="/assets/image-20230805213953156.png" alt="image-20230805213953156"></p><p>最后点击<strong>完成</strong>以关闭<strong>欢迎界面</strong></p><p><img src="/assets/image-20230805214040619.png" alt="image-20230805214040619"></p><p>弹出询问是否要更新软件，这里选择<strong>稍后提醒我</strong></p><h3 id="2-基础设置"><a href="#2-基础设置" class="headerlink" title="(2)基础设置"></a><strong>(2)基础设置</strong></h3><p><img src="/assets/image-20230805214131869.png" alt="image-20230805214131869"></p><p>鼠标移到<strong>右上角</strong>，点击<strong>设置</strong></p><p><img src="/assets/image-20230806083425409.png" alt="image-20230806083425409"></p><p>在列表中找到<strong>地区和语言</strong></p><p><img src="/assets/image-20230806083433411.png" alt="image-20230806083433411"></p><p>点击<strong>安装更多语言</strong></p><p><img src="/assets/image-20230806083439625.png" alt="image-20230806083439625"></p><p>选择<strong>安装&#x2F;移除语言</strong>，如图所示</p><p><img src="/assets/image-20230806083444521.png" alt="image-20230806083444521"></p><p>在列表中找到<strong>简体中文</strong></p><p><img src="/assets/image-20230806083451269.png" alt="image-20230806083451269"></p><p>输入设置的<strong>密码</strong></p><p><img src="/assets/image-20230806083456251.png" alt="image-20230806083456251"></p><p>耐心等待安装</p><p><img src="/assets/image-20230806083501735.png" alt="image-20230806083501735"></p><p>点击<strong>Formats</strong></p><p><img src="/assets/image-20230806083508212.png" alt="image-20230806083508212"></p><p>修改英语为汉语</p><p><img src="/assets/image-20230806083512627.png" alt="image-20230806083512627"></p><p>点击<strong>restart</strong>以更新设置</p><p><img src="/assets/image-20230806083517521.png" alt="image-20230806083517521"></p><p>重启后，再点击语言</p><p><img src="/assets/image-20230806083521996.png" alt="image-20230806083521996"></p><p>选择<strong>汉语</strong>，重复<strong>重启</strong>操作</p><p><img src="/assets/image-20230806083527275.png" alt="image-20230806083527275"></p><p>选择<strong>更新名称</strong>，此时系统的语言已经成功设置成简体中文</p><p><img src="/assets/image-20230806083532673.png" alt="image-20230806083532673"></p><p>鼠标再次移动到右上角，点击<strong>设置</strong></p><p><img src="/assets/image-20230806083539293.png" alt="image-20230806083539293">在设置列表中找到<strong>日期和时间</strong>，点击<strong>时区</strong></p><p><img src="/assets/image-20230806083544570.png" alt="image-20230806083544570"></p><p>在世界地图上点击<strong>上海</strong>以修改时间</p><p><img src="/assets/image-20230806083549522.png" alt="image-20230806083549522"></p><p>鼠标移到右上角，点击<strong>设置</strong></p><p><img src="/assets/image-20230806083555033.png" alt="image-20230806083555033"></p><p>选择<strong>区域与语言</strong>，点击**+**</p><p><img src="/assets/image-20230806083559638.png" alt="image-20230806083559638"></p><p>选择<strong>汉语</strong></p><p><img src="/assets/image-20230806083604905.png" alt="image-20230806083604905"></p><p>这里选择了<strong>智能拼音输入法</strong></p><p><img src="/assets/image-20230806083610674.png" alt="image-20230806083610674"></p><p>点击右上角的<strong>en</strong>,可切换输入法为中文输入法</p><h2 id="4-VM-tools的安装"><a href="#4-VM-tools的安装" class="headerlink" title="4.VM tools的安装"></a><strong>4.VM tools的安装</strong></h2><p><img src="/assets/image-20230809054925612.png" alt="image-20230809054925612"></p><p>鼠标移到右上角，点击<strong>设置</strong></p><p><img src="/assets/image-20230809054934788.png" alt="image-20230809054934788"></p><p>下拉设置列表，找到<strong>关于</strong>，选择<strong>软件更新</strong></p><p><img src="/assets/image-20230809054940943.png" alt="image-20230809054940943"></p><p>将主服务器切换为<strong>位于中国的服务器</strong></p><p><img src="/assets/image-20230809054946081.png" alt="image-20230809054946081"></p><p>输入密码</p><p><img src="/assets/image-20230809054951064.png" alt="image-20230809054951064"></p><p>点击<strong>其他</strong></p><p><img src="/assets/image-20230809054957105.png" alt="image-20230809054957105"></p><p>推荐选择如图所示的服务器，选择后，点击<strong>选择服务器</strong></p><p><img src="/assets/image-20230809055002480.png" alt="image-20230809055002480"></p><p>点击<strong>关闭</strong></p><p><img src="/assets/image-20230809055008347.png" alt="image-20230809055008347"></p><p>提示更新软件包，点击<strong>重新载入</strong></p><p><img src="/assets/image-20230809055014315.png" alt="image-20230809055014315"></p><p>等待更新软件缓存</p><p><img src="/assets/image-20230809070221536.png" alt="image-20230809070221536"></p><p>点击<strong>文件</strong>，在主目录下单击<strong>右键</strong>，选择<strong>在终端打开</strong></p><p><img src="/assets/image-20230809070528672.png" alt="image-20230809070528672"></p><p><strong>在终端输入以下命令</strong>:</p><p><code>sudo apt-get install open-vm-tools-desktop</code></p><p>完成安装后<strong>重启</strong>虚拟机</p><p><img src="/assets/image-20230809070902358.png" alt="image-20230809070902358"></p><p>此时我们在本机创建一个名为“1”的文本文件并拖放到虚拟机的文件夹里，拖放成功。这样便使本机和虚拟机能互相传递文件，实现复制粘贴的功能了</p><h1 id="四、Miniconda安装及虚拟环境搭建"><a href="#四、Miniconda安装及虚拟环境搭建" class="headerlink" title="四、Miniconda安装及虚拟环境搭建"></a><strong>四、Miniconda安装及虚拟环境搭建</strong></h1><h2 id="1-SH文件的安装"><a href="#1-SH文件的安装" class="headerlink" title="1.SH文件的安装"></a><strong>1.SH文件的安装</strong></h2><p><img src="/assets/image-20230809072909667.png" alt="image-20230809072909667"></p><p>打开终端，输入以下命令:</p><p><code>wget -c https://mirrors.bfsu.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh</code></p><p>等待安装</p><p><img src="/assets/image-20230809073209366.png" alt="image-20230809073209366"></p><p>输入<code>ls</code>,此时可以在文件目录查看到安装的文件了</p><h2 id="2-配置文件的安装"><a href="#2-配置文件的安装" class="headerlink" title="2.配置文件的安装"></a><strong>2.配置文件的安装</strong></h2><p><img src="/assets/image-20230809083026465.png" alt="image-20230809083026465"></p><p>打开文件夹，主目录下也可以看到刚才下载好的文件，单击<strong>右键</strong>，选择<strong>在终端中打开</strong></p><p><img src="/assets/image-20230809083158673.png" alt="image-20230809083158673"></p><p>输入以下命令:</p><p><code>sh ./Miniconda3-latest-Linux-x86_64.sh</code></p><p><img src="/assets/image-20230809083539106.png" alt="image-20230809083539106"></p><p>按下<strong>回车键</strong></p><p><img src="/assets/image-20230809083838327.png" alt="image-20230809083838327"></p><p>一路按下回车键，直到出现询问你是否同意协议时，输入<strong>yes</strong></p><p><img src="/assets/image-20230809084011045.png" alt="image-20230809084011045"></p><p>此时即将开始安装配置文件，这里选择了按下<strong>回车键</strong>让系统自动创建一个目录，也可以自己手动创建文件夹</p><p><img src="/assets/image-20230809084121883.png" alt="image-20230809084121883"></p><p>输入<strong>yes</strong>继续安装</p><p><img src="/assets/image-20230809084202550.png" alt="image-20230809084202550"></p><p>安装成功</p><p><img src="/assets/image-20230809084602413.png" alt="image-20230809084602413"></p><p>此时在主目录文件夹里也可以看到成功创建的miniconda3文件夹</p><h2 id="3-channels的添加"><a href="#3-channels的添加" class="headerlink" title="3.channels的添加"></a><strong>3.channels的添加</strong></h2><p><img src="/assets/image-20230809085506012.png" alt="image-20230809085506012"></p><p>输入以下命令:</p><p><code>source ~/.bashrc</code></p><p>使用清华大学镜像网站添加频道，依次输入以下5条命令:</p><p><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code></p><p><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</code></p><p><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</code></p><p><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</code></p><p><code>conda config --set show_channel_urls yes </code></p><h2 id="4-虚拟环境的创建"><a href="#4-虚拟环境的创建" class="headerlink" title="4.虚拟环境的创建"></a><strong>4.虚拟环境的创建</strong></h2><p><img src="/assets/image-20230809085729430.png" alt="image-20230809085729430"></p><p>输入<code>cd miniconda3</code>以进入miniconda3文件夹</p><p><img src="/assets/image-20230809085917954.png" alt="image-20230809085917954"></p><p>输入<code>ls</code>查看文件列表，可以看到envs文件夹。输入<code>cd envs/</code>进入envs文件夹。再次输入<code>ls</code>查看文件列表，可以看到目前envs文件夹是空的，也就是说没有创建好的虚拟环境</p><p>输入两次<code>cd ..</code>退回到主目录中</p><p><img src="/assets/image-20230809093534142.png" alt="image-20230809093534142"></p><p>输入<code>conda create -n myenv</code>以创建一个名为“myenv”的环境，等待创建</p><p><img src="/assets/image-20230809093754036.png" alt="image-20230809093754036"></p><p>输入<code>conda activate myenv</code>以激活环境</p><p>输入<code>conda deactivate</code>可以回到base环境</p><p><img src="/assets/image-20230809094113434.png" alt="image-20230809094113434"></p><p>现在我们再次打开miniconda3文件夹中的envs文件夹，就可以看到新创建的myenv小环境了</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
